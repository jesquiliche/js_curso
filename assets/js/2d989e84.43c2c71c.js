"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[793],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>k});var t=n(7294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function r(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),p=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},d=function(e){var a=p(e.components);return t.createElement(s.Provider,{value:a},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=p(n),u=o,k=c["".concat(s,".").concat(u)]||c[u]||m[u]||i;return n?t.createElement(k,l(l({ref:a},d),{},{components:n})):t.createElement(k,l({ref:a},d))}));function k(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=u;var r={};for(var s in a)hasOwnProperty.call(a,s)&&(r[s]=a[s]);r.originalType=e,r[c]="string"==typeof e?e:o,l[1]=r;for(var p=2;p<i;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9691:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var t=n(7462),o=(n(7294),n(3905));const i={sidebar_position:2},l="Sintaxis B\xe1sica",r={unversionedId:"funadamentos/sintaxis",id:"funadamentos/sintaxis",title:"Sintaxis B\xe1sica",description:"Variables y Constantes",source:"@site/docs/funadamentos/sintaxis.md",sourceDirName:"funadamentos",slug:"/funadamentos/sintaxis",permalink:"/js_curso/docs/funadamentos/sintaxis",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/funadamentos/sintaxis.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Primeros Pasos con JavaScript",permalink:"/js_curso/docs/funadamentos/primerospasos"},next:{title:"Operadores",permalink:"/js_curso/docs/funadamentos/operadores"}},s={},p=[{value:"Variables y Constantes",id:"variables-y-constantes",level:2},{value:"Introducci\xf3n",id:"introducci\xf3n",level:3},{value:"Declaraci\xf3n y Asignaci\xf3n de Variables",id:"declaraci\xf3n-y-asignaci\xf3n-de-variables",level:3},{value:"<code>var</code>",id:"var",level:3},{value:"<code>let</code>",id:"let",level:3},{value:"<code>const</code>",id:"const",level:2},{value:"Mejores Pr\xe1cticas",id:"mejores-pr\xe1cticas",level:2},{value:"Hoisting",id:"hoisting",level:2},{value:"Tipos de Datos y Asignaci\xf3n",id:"tipos-de-datos-y-asignaci\xf3n",level:2},{value:"Variables Globales y Locales",id:"variables-globales-y-locales",level:2},{value:"Tipos de Datos en JavaScript",id:"tipos-de-datos-en-javascript",level:2},{value:"Introducci\xf3n",id:"introducci\xf3n-1",level:2},{value:"Tipos de Datos Primitivos",id:"tipos-de-datos-primitivos",level:2},{value:"Number",id:"number",level:2},{value:"String",id:"string",level:2},{value:"Boolean",id:"boolean",level:2},{value:"Null",id:"null",level:2},{value:"Undefined",id:"undefined",level:2},{value:"Symbol",id:"symbol",level:3},{value:"BigInt",id:"bigint",level:2},{value:"Tipos de Datos Complejos",id:"tipos-de-datos-complejos",level:2},{value:"Object",id:"object",level:2},{value:"Array",id:"array",level:2},{value:"Otros Tipos de Datos",id:"otros-tipos-de-datos",level:2},{value:"Function",id:"function",level:2},{value:"Date",id:"date",level:2},{value:"Conversi\xf3n de Tipos",id:"conversi\xf3n-de-tipos",level:2},{value:"Conversi\xf3n Expl\xedcita",id:"conversi\xf3n-expl\xedcita",level:3},{value:"Conversi\xf3n Impl\xedcita",id:"conversi\xf3n-impl\xedcita",level:3},{value:"Comparaciones de Tipos",id:"comparaciones-de-tipos",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n-1",level:3},{value:"Conversi\xf3n de Tipos Autom\xe1tica en JavaScript",id:"conversi\xf3n-de-tipos-autom\xe1tica-en-javascript",level:2},{value:"conversi\xf3n de Tipos Impl\xedcita",id:"conversi\xf3n-de-tipos-impl\xedcita",level:3},{value:"conversi\xf3n a Cadena (String)",id:"conversi\xf3n-a-cadena-string",level:4},{value:"conversi\xf3n a N\xfamero (Number)",id:"conversi\xf3n-a-n\xfamero-number",level:4},{value:"conversi\xf3n a Booleano (Boolean)",id:"conversi\xf3n-a-booleano-boolean",level:4},{value:"conversi\xf3n de Tipos Expl\xedcita",id:"conversi\xf3n-de-tipos-expl\xedcita",level:3},{value:"Convertir a Cadena",id:"convertir-a-cadena",level:4},{value:"Convertir a N\xfamero",id:"convertir-a-n\xfamero",level:4},{value:"Convertir a Booleano",id:"convertir-a-booleano",level:4},{value:"Ejemplos de conversi\xf3n de Tipos en Comparaciones",id:"ejemplos-de-conversi\xf3n-de-tipos-en-comparaciones",level:3},{value:"Comparaciones con <code>==</code> (Igualdad Flexible)",id:"comparaciones-con--igualdad-flexible",level:4},{value:"Comparaciones con <code>===</code> (Igualdad Estricta)",id:"comparaciones-con--igualdad-estricta",level:4},{value:"Conclusi\xf3n",id:"conclusi\xf3n-2",level:3},{value:"Interpolaci\xf3n en JavaScript",id:"interpolaci\xf3n-en-javascript",level:2},{value:"\xbfQu\xe9 son las Plantillas de Cadena?",id:"qu\xe9-son-las-plantillas-de-cadena",level:3},{value:"Sintaxis B\xe1sica",id:"sintaxis-b\xe1sica-1",level:4},{value:"Ventajas de Usar Plantillas de Cadena",id:"ventajas-de-usar-plantillas-de-cadena",level:3},{value:"Ejemplo de Multil\xednea",id:"ejemplo-de-multil\xednea",level:4},{value:"Ejemplo de Expresiones Complejas",id:"ejemplo-de-expresiones-complejas",level:4},{value:"Usos Comunes de la Interpolaci\xf3n",id:"usos-comunes-de-la-interpolaci\xf3n",level:3},{value:"Inclusi\xf3n de Variables",id:"inclusi\xf3n-de-variables",level:4},{value:"Formateo de Fechas",id:"formateo-de-fechas",level:4},{value:"Resultados de Funciones",id:"resultados-de-funciones",level:4},{value:"Conclusi\xf3n",id:"conclusi\xf3n-3",level:3}],d={toc:p},c="wrapper";function m(e){let{components:a,...n}=e;return(0,o.kt)(c,(0,t.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sintaxis-b\xe1sica"},"Sintaxis B\xe1sica"),(0,o.kt)("h2",{id:"variables-y-constantes"},"Variables y Constantes"),(0,o.kt)("h3",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,o.kt)("p",null,"Las variables y constantes son elementos fundamentales en cualquier lenguaje de programaci\xf3n. En JavaScript, las variables y constantes se utilizan para almacenar datos que pueden cambiar o permanecer constantes durante la ejecuci\xf3n de un programa. Este cap\xedtulo cubrir\xe1 c\xf3mo declarar, inicializar y utilizar variables y constantes en JavaScript, as\xed como las mejores pr\xe1cticas asociadas."),(0,o.kt)("h3",{id:"declaraci\xf3n-y-asignaci\xf3n-de-variables"},"Declaraci\xf3n y Asignaci\xf3n de Variables"),(0,o.kt)("p",null,"En JavaScript, las variables se pueden declarar utilizando tres palabras clave: ",(0,o.kt)("inlineCode",{parentName:"p"},"var"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"const"),". Cada una tiene sus propias caracter\xedsticas y usos espec\xedficos."),(0,o.kt)("h3",{id:"var"},(0,o.kt)("inlineCode",{parentName:"h3"},"var")),(0,o.kt)("p",null,"Antes de ES6 (ECMAScript 2015), ",(0,o.kt)("inlineCode",{parentName:"p"},"var")," era la \xfanica manera de declarar variables en JavaScript. Sin embargo, tiene algunas limitaciones y comportamientos que pueden llevar a errores, como el hoisting y la falta de scope de bloque."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var nombre = "Juan";\nconsole.log(nombre); // Salida: Juan\n\nvar nombre = "Pedro";\nconsole.log(nombre); // Salida: Pedro\n')),(0,o.kt)("h3",{id:"let"},(0,o.kt)("inlineCode",{parentName:"h3"},"let")),(0,o.kt)("p",null,"Introducido en ES6, ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," es ahora la manera recomendada de declarar variables que pueden cambiar su valor. A diferencia de ",(0,o.kt)("inlineCode",{parentName:"p"},"var"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," tiene un scope de bloque, lo que significa que su alcance se limita al bloque en el que se declara."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let edad = 25;\nconsole.log(edad); // Salida: 25\n\nedad = 26;\nconsole.log(edad); // Salida: 26\n\nif (true) {\n    let edad = 30;\n    console.log(edad); // Salida: 30 (dentro del bloque)\n}\n\nconsole.log(edad); // Salida: 26 (fuera del bloque)\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"diferencia entre ",(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"let"),"y ",(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"var")),(0,o.kt)("p",{parentName:"admonition"},"La diferencia entre ",(0,o.kt)("inlineCode",{parentName:"p"},"var")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," en JavaScript radica en c\xf3mo gestionan el scope (\xe1mbito), el hoisting (elevaci\xf3n) y algunas particularidades en su comportamiento. A continuaci\xf3n, se detallan las principales diferencias:"),(0,o.kt)("h2",{parentName:"admonition",id:"scope-\xe1mbito"},"Scope (\xc1mbito)"),(0,o.kt)("h3",{parentName:"admonition",id:"var-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"var")),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Scope de funci\xf3n:")," Las variables declaradas con ",(0,o.kt)("inlineCode",{parentName:"li"},"var")," tienen un scope de funci\xf3n, lo que significa que son accesibles dentro de toda la funci\xf3n en la que se declaran."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Scope global:")," Si ",(0,o.kt)("inlineCode",{parentName:"li"},"var")," se declara fuera de cualquier funci\xf3n, se convierte en una propiedad del objeto global (",(0,o.kt)("inlineCode",{parentName:"li"},"window")," en el navegador).")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'function ejemploVar() {\n    if (true) {\n        var mensaje = "Hola, var";\n    }\n    console.log(mensaje); // "Hola, var"\n}\n\nejemploVar();\nconsole.log(mensaje); // Error: mensaje is not defined (fuera del scope de la funci\xf3n)\n')),(0,o.kt)("h3",{parentName:"admonition",id:"let-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"let")),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Scope de bloque:")," Las variables declaradas con ",(0,o.kt)("inlineCode",{parentName:"li"},"let")," tienen un scope de bloque, lo que significa que solo son accesibles dentro del bloque (",(0,o.kt)("inlineCode",{parentName:"li"},"{}"),") en el que se declaran.")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'function ejemploLet() {\n    if (true) {\n        let mensaje = "Hola, let";\n        console.log(mensaje); // "Hola, let"\n    }\n    console.log(mensaje); // Error: mensaje is not defined (fuera del scope del bloque)\n}\n\nejemploLet();\n')),(0,o.kt)("h2",{parentName:"admonition",id:"hoisting-elevaci\xf3n"},"Hoisting (Elevaci\xf3n)"),(0,o.kt)("h3",{parentName:"admonition",id:"var-2"},(0,o.kt)("inlineCode",{parentName:"h3"},"var")),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Hoisting con inicializaci\xf3n a ",(0,o.kt)("inlineCode",{parentName:"strong"},"undefined"),":")," Las declaraciones de variables con ",(0,o.kt)("inlineCode",{parentName:"li"},"var")," se elevan al inicio de su contexto (funci\xf3n o global), pero se inicializan con ",(0,o.kt)("inlineCode",{parentName:"li"},"undefined"),".")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log(nombre); // undefined\nvar nombre = "Juan";\nconsole.log(nombre); // "Juan"\n')),(0,o.kt)("p",{parentName:"admonition"},"Internamente, JavaScript trata el c\xf3digo como si fuera:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var nombre;\nconsole.log(nombre); // undefined\nnombre = "Juan";\nconsole.log(nombre); // "Juan"\n')),(0,o.kt)("h3",{parentName:"admonition",id:"let-2"},(0,o.kt)("inlineCode",{parentName:"h3"},"let")),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Hoisting sin inicializaci\xf3n:")," Las declaraciones de variables con ",(0,o.kt)("inlineCode",{parentName:"li"},"let")," tambi\xe9n se elevan, pero no se inicializan. Intentar acceder a ellas antes de su declaraci\xf3n produce un ",(0,o.kt)("inlineCode",{parentName:"li"},"ReferenceError"),".")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log(nombre); // Error: Cannot access \'nombre\' before initialization\nlet nombre = "Juan";\nconsole.log(nombre); // "Juan"\n')),(0,o.kt)("p",{parentName:"admonition"},"Internamente, JavaScript trata el c\xf3digo como si fuera:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let nombre;\nconsole.log(nombre); // Error: Cannot access \'nombre\' before initialization\nnombre = "Juan";\nconsole.log(nombre); // "Juan"\n')),(0,o.kt)("h2",{parentName:"admonition",id:"re-declaraci\xf3n"},"Re-declaraci\xf3n"),(0,o.kt)("h3",{parentName:"admonition",id:"var-3"},(0,o.kt)("inlineCode",{parentName:"h3"},"var")),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Permitido en el mismo scope:")," Puedes re-declarar una variable con ",(0,o.kt)("inlineCode",{parentName:"li"},"var")," en el mismo scope sin producir un error.")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var saludo = "Hola";\nvar saludo = "Adi\xf3s";\nconsole.log(saludo); // "Adi\xf3s"\n')),(0,o.kt)("h3",{parentName:"admonition",id:"let-3"},(0,o.kt)("inlineCode",{parentName:"h3"},"let")),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"No permitido en el mismo scope:")," Re-declarar una variable con ",(0,o.kt)("inlineCode",{parentName:"li"},"let")," en el mismo scope produce un error.")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let saludo = "Hola";\nlet saludo = "Adi\xf3s"; // Error: Identifier \'saludo\' has already been declared\n')),(0,o.kt)("h3",{parentName:"admonition",id:"variables-en-bucles"},"Variables en bucles"),(0,o.kt)("h4",{parentName:"admonition",id:"var-4"},(0,o.kt)("inlineCode",{parentName:"h4"},"var")),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"No crea un nuevo scope en cada iteraci\xf3n:")," Usar ",(0,o.kt)("inlineCode",{parentName:"li"},"var")," en bucles no crea un nuevo scope para cada iteraci\xf3n, lo que puede llevar a comportamientos inesperados.")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"for (var i = 0; i < 3; i++) {\n    setTimeout(() => console.log(i), 1000);\n}\n// Salida: 3, 3, 3 (despu\xe9s de 1 segundo)\n")),(0,o.kt)("h3",{parentName:"admonition",id:"let-4"},(0,o.kt)("inlineCode",{parentName:"h3"},"let")),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Crea un nuevo scope en cada iteraci\xf3n:")," Usar ",(0,o.kt)("inlineCode",{parentName:"li"},"let")," en bucles crea un nuevo scope para cada iteraci\xf3n, preservando el valor de la variable en cada iteraci\xf3n.")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"for (let i = 0; i < 3; i++) {\n    setTimeout(() => console.log(i), 1000);\n}\n// Salida: 0, 1, 2 (despu\xe9s de 1 segundo)\n")),(0,o.kt)("h3",{parentName:"admonition",id:"conclusi\xf3n"},"Conclusi\xf3n"),(0,o.kt)("p",{parentName:"admonition"},"La elecci\xf3n entre ",(0,o.kt)("inlineCode",{parentName:"p"},"var")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," depende del comportamiento deseado:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Usa ",(0,o.kt)("inlineCode",{parentName:"li"},"let")," (o ",(0,o.kt)("inlineCode",{parentName:"li"},"const")," para valores constantes) cuando necesites declarar variables con un scope de bloque, prevenir re-declaraciones y evitar errores relacionados con el hoisting."),(0,o.kt)("li",{parentName:"ul"},"Usa ",(0,o.kt)("inlineCode",{parentName:"li"},"var")," si necesitas compatibilidad con versiones muy antiguas de JavaScript, aunque en la mayor\xeda de los casos modernos, ",(0,o.kt)("inlineCode",{parentName:"li"},"let")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"const")," son preferidos por su manejo m\xe1s seguro y predecible del scope y el hoisting.")),(0,o.kt)("p",{parentName:"admonition"},"Comprender estas diferencias te permitir\xe1 escribir c\xf3digo m\xe1s robusto y mantener un mejor control sobre el comportamiento de tus variables en JavaScript.")),(0,o.kt)("h2",{id:"const"},(0,o.kt)("inlineCode",{parentName:"h2"},"const")),(0,o.kt)("p",null,"Tambi\xe9n introducido en ES6, ",(0,o.kt)("inlineCode",{parentName:"p"},"const")," se utiliza para declarar constantes, es decir, valores que no cambian una vez asignados. Como ",(0,o.kt)("inlineCode",{parentName:"p"},"let"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"const")," tiene un scope de bloque."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const PI = 3.14159;\nconsole.log(PI); // Salida: 3.14159\n\n// Intentar reasignar una constante causar\xe1 un error\n// PI = 3.14; // Error: Assignment to constant variable.\n")),(0,o.kt)("h2",{id:"mejores-pr\xe1cticas"},"Mejores Pr\xe1cticas"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Usa ",(0,o.kt)("inlineCode",{parentName:"strong"},"const")," por defecto:")," Declara todas las variables con ",(0,o.kt)("inlineCode",{parentName:"li"},"const")," a menos que sepas que su valor necesitar\xe1 cambiar. Esto ayuda a evitar errores accidentales y hace el c\xf3digo m\xe1s predecible."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Usa ",(0,o.kt)("inlineCode",{parentName:"strong"},"let")," cuando necesites reasignar:")," Solo usa ",(0,o.kt)("inlineCode",{parentName:"li"},"let")," cuando necesites declarar una variable cuyo valor cambiar\xe1."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Evita ",(0,o.kt)("inlineCode",{parentName:"strong"},"var"),":")," ",(0,o.kt)("inlineCode",{parentName:"li"},"var")," tiene problemas de scope y hoisting que pueden llevar a errores dif\xedciles de depurar. Prefiere ",(0,o.kt)("inlineCode",{parentName:"li"},"let")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"const")," para una mejor claridad y seguridad.")),(0,o.kt)("h2",{id:"hoisting"},"Hoisting"),(0,o.kt)("p",null,'El hoisting es un comportamiento de JavaScript donde las declaraciones de variables y funciones se "mueven" al inicio de su scope antes de la ejecuci\xf3n del c\xf3digo. Este comportamiento puede ser confuso y es una raz\xf3n para preferir ',(0,o.kt)("inlineCode",{parentName:"p"},"let")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"const")," sobre ",(0,o.kt)("inlineCode",{parentName:"p"},"var"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log(nombre); // Salida: undefined\nvar nombre = "Juan";\n\n// Es equivalente a:\nvar nombre;\nconsole.log(nombre); // Salida: undefined\nnombre = "Juan";\n')),(0,o.kt)("p",null,"Con ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"const"),", las variables no se inicializan hasta que la ejecuci\xf3n llega a su declaraci\xf3n."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(nombre); // Error: Cannot access 'nombre' before initialization\nlet nombre = \"Juan\";\n")),(0,o.kt)("h2",{id:"tipos-de-datos-y-asignaci\xf3n"},"Tipos de Datos y Asignaci\xf3n"),(0,o.kt)("p",null,"JavaScript es un lenguaje din\xe1mico, lo que significa que una variable puede contener diferentes tipos de datos a lo largo de su ciclo de vida."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let variable = 42;       // N\xfamero\nvariable = "Hola";       // Cadena de texto\nvariable = true;         // Booleano\nvariable = { nombre: "Juan" }; // Objeto\nvariable = [1, 2, 3];    // Array\n')),(0,o.kt)("h2",{id:"variables-globales-y-locales"},"Variables Globales y Locales"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Variables Globales:")," Declaradas fuera de cualquier funci\xf3n o bloque, son accesibles desde cualquier parte del c\xf3digo."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Variables Locales:")," Declaradas dentro de una funci\xf3n o bloque, son accesibles solo dentro de ese contexto.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let global = "Soy global";\n\nfunction mostrarMensaje() {\n    let local = "Soy local";\n    console.log(global); // Accede a la variable global\n    console.log(local);  // Accede a la variable local\n}\n\nmostrarMensaje();\nconsole.log(global); // Salida: Soy global\n// console.log(local); // Error: local is not defined\n')),(0,o.kt)("h2",{id:"tipos-de-datos-en-javascript"},"Tipos de Datos en JavaScript"),(0,o.kt)("h2",{id:"introducci\xf3n-1"},"Introducci\xf3n"),(0,o.kt)("p",null,"Los tipos de datos son fundamentales en cualquier lenguaje de programaci\xf3n, ya que determinan qu\xe9 tipo de valores pueden almacenar y c\xf3mo se pueden manipular. JavaScript es un lenguaje din\xe1mico, lo que significa que las variables pueden contener diferentes tipos de datos en distintos momentos de la ejecuci\xf3n del programa. En este cap\xedtulo, exploraremos los tipos de datos primitivos y complejos en JavaScript y c\xf3mo se utilizan."),(0,o.kt)("h2",{id:"tipos-de-datos-primitivos"},"Tipos de Datos Primitivos"),(0,o.kt)("p",null,"Los tipos de datos primitivos son los valores m\xe1s b\xe1sicos y no pueden descomponerse en otros valores. En JavaScript, los tipos de datos primitivos incluyen: ",(0,o.kt)("inlineCode",{parentName:"p"},"number"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"boolean"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"symbol")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"bigint"),"."),(0,o.kt)("h2",{id:"number"},"Number"),(0,o.kt)("p",null,"El tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"number")," se utiliza para representar tanto n\xfameros enteros como n\xfameros de punto flotante."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let entero = 42;\nlet decimal = 3.14;\n")),(0,o.kt)("h2",{id:"string"},"String"),(0,o.kt)("p",null,"El tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," se utiliza para representar secuencias de caracteres. Puedes usar comillas simples (",(0,o.kt)("inlineCode",{parentName:"p"},"'"),"), comillas dobles (",(0,o.kt)("inlineCode",{parentName:"p"},'"'),") o comillas invertidas (",(0,o.kt)("inlineCode",{parentName:"p"},"`"),") para definir strings."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let mensaje = \"Hola, mundo!\";\nlet saludo = '\xa1Buenos d\xedas!';\nlet template = `El valor de entero es ${entero}`;\n")),(0,o.kt)("h2",{id:"boolean"},"Boolean"),(0,o.kt)("p",null,"El tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," solo puede tener dos valores: ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),". Se utiliza para representar valores l\xf3gicos."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let esMayor = true;\nlet esMenor = false;\n")),(0,o.kt)("h2",{id:"null"},"Null"),(0,o.kt)("p",null,"El valor ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," representa la ausencia intencional de cualquier objeto o valor."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let vacio = null;\n")),(0,o.kt)("h2",{id:"undefined"},"Undefined"),(0,o.kt)("p",null,"El valor ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," indica que una variable ha sido declarada pero a\xfan no se le ha asignado un valor."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let indefinido;\nconsole.log(indefinido); // Salida: undefined\n")),(0,o.kt)("h3",{id:"symbol"},"Symbol"),(0,o.kt)("p",null,"El tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"symbol")," es un tipo de dato primitivo \xfanico y inmutable que se utiliza para crear identificadores \xfanicos."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let simbolo1 = Symbol("descripcion");\nlet simbolo2 = Symbol("descripcion");\nconsole.log(simbolo1 === simbolo2); // Salida: false\n')),(0,o.kt)("h2",{id:"bigint"},"BigInt"),(0,o.kt)("p",null,"El tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"bigint")," se utiliza para representar enteros de gran tama\xf1o que no pueden ser representados con el tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"number"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let numeroGrande = 1234567890123456789012345678901234567890n;\nconsole.log(numeroGrande); // Salida: 1234567890123456789012345678901234567890n\n")),(0,o.kt)("h2",{id:"tipos-de-datos-complejos"},"Tipos de Datos Complejos"),(0,o.kt)("p",null,"Los tipos de datos complejos pueden almacenar colecciones de valores y m\xe1s complejos que los tipos primitivos. En JavaScript, los principales tipos de datos complejos son ",(0,o.kt)("inlineCode",{parentName:"p"},"object")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"array"),"."),(0,o.kt)("h2",{id:"object"},"Object"),(0,o.kt)("p",null,"El tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"object")," es una colecci\xf3n de pares clave-valor. Puedes usar objetos para almacenar datos estructurados y representarlos como entidades del mundo real."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let persona = {\n    nombre: "Juan",\n    edad: 30,\n    saludo: function() {\n        console.log("Hola, soy " + this.nombre);\n    }\n};\n\nconsole.log(persona.nombre); // Salida: Juan\npersona.saludo(); // Salida: Hola, soy Juan\n')),(0,o.kt)("h2",{id:"array"},"Array"),(0,o.kt)("p",null,"El tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"array")," es una colecci\xf3n ordenada de elementos. Los arrays se utilizan para almacenar listas de valores y proporcionan m\xe9todos integrados para manipular estos valores."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let frutas = ["manzana", "banana", "cereza"];\nconsole.log(frutas[0]); // Salida: manzana\n\nfrutas.push("naranja");\nconsole.log(frutas); // Salida: ["manzana", "banana", "cereza", "naranja"]\n')),(0,o.kt)("admonition",{title:"\xbfQu\xe9 es un array",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Imagina que tienes una caja con compartimentos donde puedes guardar diferentes objetos, como juguetes, libros, o cualquier cosa que se te ocurra. En programaci\xf3n, un array (o arreglo) es como esa caja con compartimentos, pero en lugar de guardar objetos f\xedsicos, guarda datos. Un array te permite almacenar varios valores en una sola variable, y puedes acceder a cada valor usando un n\xfamero de \xedndice."),(0,o.kt)("h4",{parentName:"admonition",id:"c\xf3mo-se-ve-un-array"},"\xbfC\xf3mo se ve un Array?"),(0,o.kt)("p",{parentName:"admonition"},"Un array en JavaScript se parece a una lista de elementos encerrados entre corchetes ",(0,o.kt)("inlineCode",{parentName:"p"},"[]"),", separados por comas."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Ejemplo de un Array de frutas:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let frutas = ["manzana", "banana", "cereza"];\n')),(0,o.kt)("p",{parentName:"admonition"},"En este ejemplo, el array ",(0,o.kt)("inlineCode",{parentName:"p"},"frutas")," contiene tres elementos: ",(0,o.kt)("inlineCode",{parentName:"p"},'"manzana"'),", ",(0,o.kt)("inlineCode",{parentName:"p"},'"banana"')," y ",(0,o.kt)("inlineCode",{parentName:"p"},'"cereza"'),"."),(0,o.kt)("h4",{parentName:"admonition",id:"acceder-a-los-elementos-de-un-array"},"Acceder a los Elementos de un Array"),(0,o.kt)("p",{parentName:"admonition"},"Cada elemento de un array tiene una posici\xf3n espec\xedfica, llamada \xedndice. Los \xedndices empiezan en 0. As\xed, el primer elemento tiene el \xedndice 0, el segundo elemento tiene el \xedndice 1, y as\xed sucesivamente."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let frutas = ["manzana", "banana", "cereza"];\n\nconsole.log(frutas[0]); // Salida: "manzana"\nconsole.log(frutas[1]); // Salida: "banana"\nconsole.log(frutas[2]); // Salida: "cereza"\n')),(0,o.kt)("p",{parentName:"admonition"},"En este ejemplo, ",(0,o.kt)("inlineCode",{parentName:"p"},"frutas[0]")," accede al primer elemento del array, que es ",(0,o.kt)("inlineCode",{parentName:"p"},'"manzana"'),", ",(0,o.kt)("inlineCode",{parentName:"p"},"frutas[1]")," accede al segundo elemento, que es ",(0,o.kt)("inlineCode",{parentName:"p"},'"banana"'),", y ",(0,o.kt)("inlineCode",{parentName:"p"},"frutas[2]")," accede al tercer elemento, que es ",(0,o.kt)("inlineCode",{parentName:"p"},'"cereza"'),"."),(0,o.kt)("h4",{parentName:"admonition",id:"cambiar-elementos-en-un-array"},"Cambiar Elementos en un Array"),(0,o.kt)("p",{parentName:"admonition"},"Tambi\xe9n puedes cambiar los valores en un array accediendo a ellos por su \xedndice y asign\xe1ndoles un nuevo valor."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let frutas = ["manzana", "banana", "cereza"];\nfrutas[1] = "naranja";\n\nconsole.log(frutas); // Salida: ["manzana", "naranja", "cereza"]\n')),(0,o.kt)("p",{parentName:"admonition"},"En este ejemplo, el segundo elemento del array ",(0,o.kt)("inlineCode",{parentName:"p"},"frutas")," se cambia de ",(0,o.kt)("inlineCode",{parentName:"p"},'"banana"')," a ",(0,o.kt)("inlineCode",{parentName:"p"},'"naranja"'),"."),(0,o.kt)("h4",{parentName:"admonition",id:"a\xf1adir-y-eliminar-elementos"},"A\xf1adir y Eliminar Elementos"),(0,o.kt)("p",{parentName:"admonition"},"Puedes a\xf1adir nuevos elementos a un array usando el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"push"),", y eliminar el \xfaltimo elemento usando el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"pop"),"."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"A\xf1adir Elementos:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let frutas = ["manzana", "banana", "cereza"];\nfrutas.push("naranja");\n\nconsole.log(frutas); // Salida: ["manzana", "banana", "cereza", "naranja"]\n')),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Eliminar el \xdaltimo Elemento:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let frutas = ["manzana", "banana", "cereza"];\nfrutas.pop();\n\nconsole.log(frutas); // Salida: ["manzana", "banana"]\n')),(0,o.kt)("h4",{parentName:"admonition",id:"recorrer-un-array"},"Recorrer un Array"),(0,o.kt)("p",{parentName:"admonition"},"A menudo, querr\xe1s realizar una acci\xf3n en cada elemento de un array. Puedes hacerlo usando un bucle ",(0,o.kt)("inlineCode",{parentName:"p"},"for"),"."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let frutas = ["manzana", "banana", "cereza"];\n\nfor (let i = 0; i < frutas.length; i++) {\n    console.log(frutas[i]);\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"En este ejemplo, el bucle ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," recorre cada elemento del array ",(0,o.kt)("inlineCode",{parentName:"p"},"frutas")," y lo imprime en la consola."),(0,o.kt)("h4",{parentName:"admonition",id:"resumen"},"Resumen"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Un array es una lista de elementos almacenados en una sola variable."),(0,o.kt)("li",{parentName:"ul"},"Los elementos de un array se acceden usando \xedndices, que empiezan en 0."),(0,o.kt)("li",{parentName:"ul"},"Puedes cambiar, a\xf1adir y eliminar elementos en un array."),(0,o.kt)("li",{parentName:"ul"},"Los arrays son \xfatiles para almacenar y manipular colecciones de datos."))),(0,o.kt)("h2",{id:"otros-tipos-de-datos"},"Otros Tipos de Datos"),(0,o.kt)("h2",{id:"function"},"Function"),(0,o.kt)("p",null,"En JavaScript, las funciones son objetos de primera clase, lo que significa que pueden ser asignadas a variables, pasadas como argumentos y devueltas por otras funciones."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'function saludar(nombre) {\n    return "Hola, " + nombre;\n}\n\nlet mensaje = saludar("Carlos");\nconsole.log(mensaje); // Salida: Hola, Carlos\n')),(0,o.kt)("h2",{id:"date"},"Date"),(0,o.kt)("p",null,"El tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"Date")," se utiliza para trabajar con fechas y horas."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let fechaActual = new Date();\nconsole.log(fechaActual); // Salida: la fecha y hora actual\n")),(0,o.kt)("h2",{id:"conversi\xf3n-de-tipos"},"Conversi\xf3n de Tipos"),(0,o.kt)("p",null,"En JavaScript, puedes convertir valores de un tipo a otro de manera expl\xedcita o impl\xedcita."),(0,o.kt)("h3",{id:"conversi\xf3n-expl\xedcita"},"Conversi\xf3n Expl\xedcita"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let numeroString = "123";\nlet numero = Number(numeroString); // Conversi\xf3n a n\xfamero\nconsole.log(numero); // Salida: 123\n\nlet booleano = Boolean(1); // Conversi\xf3n a booleano\nconsole.log(booleano); // Salida: true\n')),(0,o.kt)("h3",{id:"conversi\xf3n-impl\xedcita"},"Conversi\xf3n Impl\xedcita"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let resultado = "5" * 2; // La cadena "5" se convierte impl\xedcitamente en n\xfamero\nconsole.log(resultado); // Salida: 10\n\nlet concatenacion = "5" + 2; // El n\xfamero 2 se convierte impl\xedcitamente en cadena\nconsole.log(concatenacion); // Salida: "52"\n')),(0,o.kt)("h3",{id:"comparaciones-de-tipos"},"Comparaciones de Tipos"),(0,o.kt)("p",null,"JavaScript proporciona dos operadores para comparar valores: ",(0,o.kt)("inlineCode",{parentName:"p"},"==")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"==="),". El operador ",(0,o.kt)("inlineCode",{parentName:"p"},"==")," realiza una comparaci\xf3n no estricta, lo que significa que intenta convertir los valores a un tipo com\xfan antes de compararlos. El operador ",(0,o.kt)("inlineCode",{parentName:"p"},"===")," realiza una comparaci\xf3n estricta, sin conversi\xf3n de tipos."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log(5 == "5"); // Salida: true (comparaci\xf3n no estricta)\nconsole.log(5 === "5"); // Salida: false (comparaci\xf3n estricta)\n')),(0,o.kt)("h3",{id:"conclusi\xf3n-1"},"Conclusi\xf3n"),(0,o.kt)("p",null,"Comprender los tipos de datos en JavaScript es crucial para escribir c\xf3digo eficaz y evitar errores. Los tipos primitivos y complejos tienen diferentes usos y caracter\xedsticas, y conocer c\xf3mo manipular y convertir estos tipos te permitir\xe1 manejar datos de manera m\xe1s efectiva. Practica con diferentes tipos de datos y aprende c\xf3mo interact\xfaan entre s\xed para mejorar tus habilidades en JavaScript."),(0,o.kt)("h2",{id:"conversi\xf3n-de-tipos-autom\xe1tica-en-javascript"},"Conversi\xf3n de Tipos Autom\xe1tica en JavaScript"),(0,o.kt)("p",null,'JavaScript es un lenguaje de programaci\xf3n con tipado din\xe1mico y d\xe9bil, lo que significa que las variables no tienen tipos fijos y el lenguaje puede convertir autom\xe1ticamente entre diferentes tipos de datos seg\xfan sea necesario. Esta caracter\xedstica, conocida como "conversi\xf3n de tipos", puede ser \xfatil, pero tambi\xe9n puede causar comportamientos inesperados si no se comprende adecuadamente. A continuaci\xf3n, exploraremos c\xf3mo funciona la conversi\xf3n de tipos autom\xe1tica en JavaScript, con ejemplos para ilustrar su comportamiento.'),(0,o.kt)("h3",{id:"conversi\xf3n-de-tipos-impl\xedcita"},"conversi\xf3n de Tipos Impl\xedcita"),(0,o.kt)("p",null,"La conversi\xf3n de tipos impl\xedcita ocurre cuando JavaScript convierte autom\xe1ticamente un valor de un tipo a otro durante la evaluaci\xf3n de una expresi\xf3n. Aqu\xed hay algunos ejemplos comunes:"),(0,o.kt)("h4",{id:"conversi\xf3n-a-cadena-string"},"conversi\xf3n a Cadena (String)"),(0,o.kt)("p",null,"Cuando se utiliza el operador ",(0,o.kt)("inlineCode",{parentName:"p"},"+")," con una cadena de texto y otro tipo de dato, JavaScript convierte el otro tipo de dato a una cadena:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let result1 = '5' + 3; // \"53\"\nlet result2 = 'Hello' + true; // \"Hellotrue\"\nlet result3 = 'The answer is ' + 42; // \"The answer is 42\"\n")),(0,o.kt)("p",null,"En estos ejemplos, el n\xfamero ",(0,o.kt)("inlineCode",{parentName:"p"},"3"),", el valor booleano ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," y el n\xfamero ",(0,o.kt)("inlineCode",{parentName:"p"},"42")," se convierten a cadenas y luego se concatenan con la cadena original."),(0,o.kt)("h4",{id:"conversi\xf3n-a-n\xfamero-number"},"conversi\xf3n a N\xfamero (Number)"),(0,o.kt)("p",null,"Cuando se utilizan operadores aritm\xe9ticos como ",(0,o.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"/"),", o ",(0,o.kt)("inlineCode",{parentName:"p"},"%"),", JavaScript convierte autom\xe1ticamente los operandos a n\xfameros:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let result4 = '5' - 3; // 2\nlet result5 = '10' * '2'; // 20\nlet result6 = '15' / '3'; // 5\nlet result7 = '8' % '3'; // 2\n")),(0,o.kt)("p",null,"En estos ejemplos, las cadenas ",(0,o.kt)("inlineCode",{parentName:"p"},"'5'"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"'10'"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"'15'")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"'8'")," se convierten a n\xfameros para realizar las operaciones aritm\xe9ticas."),(0,o.kt)("h4",{id:"conversi\xf3n-a-booleano-boolean"},"conversi\xf3n a Booleano (Boolean)"),(0,o.kt)("p",null,"En contextos booleanos, como en una condici\xf3n de una sentencia ",(0,o.kt)("inlineCode",{parentName:"p"},"if"),", JavaScript convierte autom\xe1ticamente los valores a ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),' bas\xe1ndose en si son "valores falsy" o "valores truthy". Los valores falsy incluyen:'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"false")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"''")," (cadena vac\xeda)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"null")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"undefined")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"NaN"))),(0,o.kt)("p",null,"Todos los dem\xe1s valores son truthy."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let result8 = Boolean(0); // false\nlet result9 = Boolean(''); // false\nlet result10 = Boolean([]); // true\nlet result11 = Boolean('Hello'); // true\n")),(0,o.kt)("p",null,"En estos ejemplos, ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"''")," se convierten a ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", mientras que ",(0,o.kt)("inlineCode",{parentName:"p"},"[]")," (un array vac\xedo) y ",(0,o.kt)("inlineCode",{parentName:"p"},"'Hello'")," se convierten a ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,o.kt)("h3",{id:"conversi\xf3n-de-tipos-expl\xedcita"},"conversi\xf3n de Tipos Expl\xedcita"),(0,o.kt)("p",null,"A diferencia de la conversi\xf3n impl\xedcita, la conversi\xf3n expl\xedcita ocurre cuando convertimos intencionalmente un valor de un tipo a otro usando funciones y m\xe9todos integrados."),(0,o.kt)("h4",{id:"convertir-a-cadena"},"Convertir a Cadena"),(0,o.kt)("p",null,"Para convertir un valor a una cadena expl\xedcitamente, se puede usar el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"String()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let num = 42;\nlet str = String(num); // "42"\n')),(0,o.kt)("h4",{id:"convertir-a-n\xfamero"},"Convertir a N\xfamero"),(0,o.kt)("p",null,"Para convertir un valor a un n\xfamero expl\xedcitamente, se pueden usar los m\xe9todos ",(0,o.kt)("inlineCode",{parentName:"p"},"Number()")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"parseInt()"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"parseFloat()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let strNum = '123';\nlet num1 = Number(strNum); // 123\nlet num2 = parseInt(strNum); // 123\nlet num3 = parseFloat('123.45'); // 123.45\n")),(0,o.kt)("h4",{id:"convertir-a-booleano"},"Convertir a Booleano"),(0,o.kt)("p",null,"Para convertir un valor a un booleano expl\xedcitamente, se puede usar el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"Boolean()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let str = 'Hello';\nlet isTruthy = Boolean(str); // true\n")),(0,o.kt)("h3",{id:"ejemplos-de-conversi\xf3n-de-tipos-en-comparaciones"},"Ejemplos de conversi\xf3n de Tipos en Comparaciones"),(0,o.kt)("p",null,"Las comparaciones pueden ser un \xe1rea donde la conversi\xf3n de tipos impl\xedcita lleva a resultados inesperados."),(0,o.kt)("h4",{id:"comparaciones-con--igualdad-flexible"},"Comparaciones con ",(0,o.kt)("inlineCode",{parentName:"h4"},"==")," (Igualdad Flexible)"),(0,o.kt)("p",null,"El operador ",(0,o.kt)("inlineCode",{parentName:"p"},"==")," realiza la conversi\xf3n de tipos antes de comparar:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(5 == '5'); // true\nconsole.log(false == 0); // true\nconsole.log('' == false); // true\n")),(0,o.kt)("h4",{id:"comparaciones-con--igualdad-estricta"},"Comparaciones con ",(0,o.kt)("inlineCode",{parentName:"h4"},"===")," (Igualdad Estricta)"),(0,o.kt)("p",null,"El operador ",(0,o.kt)("inlineCode",{parentName:"p"},"===")," no realiza conversi\xf3n de tipos, compara tanto el valor como el tipo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(5 === '5'); // false\nconsole.log(false === 0); // false\nconsole.log('' === false); // false\n")),(0,o.kt)("h3",{id:"conclusi\xf3n-2"},"Conclusi\xf3n"),(0,o.kt)("p",null,"La conversi\xf3n de tipos autom\xe1tica en JavaScript puede simplificar algunas operaciones, pero tambi\xe9n puede causar confusi\xf3n si no se comprende bien. Es importante ser consciente de c\xf3mo y cu\xe1ndo ocurre la conversi\xf3n de tipos para evitar errores y comportamientos inesperados en tu c\xf3digo. Utilizar ",(0,o.kt)("inlineCode",{parentName:"p"},"===")," en lugar de ",(0,o.kt)("inlineCode",{parentName:"p"},"==")," para comparaciones y ser expl\xedcito en la conversi\xf3n de tipos puede ayudar a escribir un c\xf3digo m\xe1s claro y predecible."),(0,o.kt)("h2",{id:"interpolaci\xf3n-en-javascript"},"Interpolaci\xf3n en JavaScript"),(0,o.kt)("p",null,"La interpolaci\xf3n de cadenas en JavaScript es una t\xe9cnica que permite insertar variables y expresiones dentro de cadenas de texto de manera f\xe1cil y legible. Esta t\xe9cnica se realiza usando plantillas de cadena (template literals), que fueron introducidas en ECMAScript 2015 (ES6)."),(0,o.kt)("h3",{id:"qu\xe9-son-las-plantillas-de-cadena"},"\xbfQu\xe9 son las Plantillas de Cadena?"),(0,o.kt)("p",null,"Las plantillas de cadena son una forma avanzada de trabajar con cadenas en JavaScript. Se crean usando comillas invertidas (",(0,o.kt)("inlineCode",{parentName:"p"},"`"),") en lugar de comillas simples (",(0,o.kt)("inlineCode",{parentName:"p"},"'"),") o dobles (",(0,o.kt)("inlineCode",{parentName:"p"},'"'),"), y permiten la interpolaci\xf3n de variables y expresiones usando la sintaxis ",(0,o.kt)("inlineCode",{parentName:"p"},"${}"),"."),(0,o.kt)("h4",{id:"sintaxis-b\xe1sica-1"},"Sintaxis B\xe1sica"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let nombre = 'Juan';\nlet edad = 25;\n\nlet mensaje = `Hola, mi nombre es ${nombre} y tengo ${edad} a\xf1os.`;\nconsole.log(mensaje); // \"Hola, mi nombre es Juan y tengo 25 a\xf1os.\"\n")),(0,o.kt)("p",null,"En este ejemplo, la cadena dentro de las comillas invertidas contiene dos expresiones ",(0,o.kt)("inlineCode",{parentName:"p"},"${nombre}")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"${edad}"),", que son reemplazadas por los valores de las variables ",(0,o.kt)("inlineCode",{parentName:"p"},"nombre")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"edad"),"."),(0,o.kt)("h3",{id:"ventajas-de-usar-plantillas-de-cadena"},"Ventajas de Usar Plantillas de Cadena"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Legibilidad"),": Las plantillas de cadena hacen que el c\xf3digo sea m\xe1s f\xe1cil de leer y escribir, especialmente cuando se trabajan con cadenas largas y m\xfaltiples variables."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Multil\xednea"),": Las plantillas de cadena soportan cadenas multil\xednea sin necesidad de caracteres de escape (",(0,o.kt)("inlineCode",{parentName:"li"},"\\n"),").")),(0,o.kt)("h4",{id:"ejemplo-de-multil\xednea"},"Ejemplo de Multil\xednea"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let mensajeMultilinea = `Esta es una l\xednea\ny esta es otra l\xednea.`;\nconsole.log(mensajeMultilinea);\n// "Esta es una l\xednea\n// y esta es otra l\xednea."\n')),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Expresiones Complejas"),": Puedes incluir cualquier expresi\xf3n JavaScript dentro de ",(0,o.kt)("inlineCode",{parentName:"li"},"${}"),", no solo variables simples.")),(0,o.kt)("h4",{id:"ejemplo-de-expresiones-complejas"},"Ejemplo de Expresiones Complejas"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let a = 5;\nlet b = 10;\n\nlet resultado = `La suma de 5 y 10 es ${a + b}.`;\nconsole.log(resultado); // "La suma de 5 y 10 es 15."\n')),(0,o.kt)("h3",{id:"usos-comunes-de-la-interpolaci\xf3n"},"Usos Comunes de la Interpolaci\xf3n"),(0,o.kt)("h4",{id:"inclusi\xf3n-de-variables"},"Inclusi\xf3n de Variables"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let producto = 'Laptop';\nlet precio = 999.99;\n\nlet anuncio = `El precio de la ${producto} es $${precio}.`;\nconsole.log(anuncio); // \"El precio de la Laptop es $999.99.\"\n")),(0,o.kt)("h4",{id:"formateo-de-fechas"},"Formateo de Fechas"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let fecha = new Date();\nlet fechaFormateada = `Hoy es ${fecha.getDate()}/${fecha.getMonth() + 1}/${fecha.getFullYear()}.`;\nconsole.log(fechaFormateada); // "Hoy es 17/7/2024."\n')),(0,o.kt)("h4",{id:"resultados-de-funciones"},"Resultados de Funciones"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'function obtenerDescuento(precio) {\n    return precio * 0.1;\n}\n\nlet precioOriginal = 50;\nlet descuento = obtenerDescuento(precioOriginal);\nlet mensajeDescuento = `El descuento de $${precioOriginal} es $${descuento}.`;\nconsole.log(mensajeDescuento); // "El descuento de $50 es $5."\n')),(0,o.kt)("h3",{id:"conclusi\xf3n-3"},"Conclusi\xf3n"),(0,o.kt)("p",null,"La interpolaci\xf3n de cadenas usando plantillas de cadena es una poderosa caracter\xedstica de JavaScript que mejora la legibilidad y la facilidad de manejo de cadenas. Utilizar plantillas de cadena puede hacer que tu c\xf3digo sea m\xe1s claro y conciso, y te permite incluir variables, expresiones y formateos de manera sencilla y directa."))}m.isMDXComponent=!0}}]);