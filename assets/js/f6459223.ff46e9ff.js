"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[5001],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>f});var o=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function u(e,a){if(null==e)return{};var n,o,r=function(e,a){if(null==e)return{};var n,o,r={},t=Object.keys(e);for(o=0;o<t.length;o++)n=t[o],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(o=0;o<t.length;o++)n=t[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var a=o.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},d=function(e){var a=l(e.components);return o.createElement(c.Provider,{value:a},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},m=o.forwardRef((function(e,a){var n=e.components,r=e.mdxType,t=e.originalType,c=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),s=l(n),m=r,f=s["".concat(c,".").concat(m)]||s[m]||p[m]||t;return n?o.createElement(f,i(i({ref:a},d),{},{components:n})):o.createElement(f,i({ref:a},d))}));function f(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var t=n.length,i=new Array(t);i[0]=m;var u={};for(var c in a)hasOwnProperty.call(a,c)&&(u[c]=a[c]);u.originalType=e,u[s]="string"==typeof e?e:r,i[1]=u;for(var l=2;l<t;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4341:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>t,metadata:()=>u,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const t={sidebar_position:2},i="Cap\xedtulo 14: Programaci\xf3n Funcional",u={unversionedId:"avanzado/funcional",id:"avanzado/funcional",title:"Cap\xedtulo 14: Programaci\xf3n Funcional",description:"La programaci\xf3n funcional es un paradigma de programaci\xf3n que trata las computaciones como evaluaciones de funciones matem\xe1ticas y evita el cambio de estado y la mutaci\xf3n de datos. En JavaScript, este enfoque se basa en el uso de funciones de orden superior, la inmutabilidad de datos y el uso de funciones puras, as\xed como en el uso de m\xe9todos como map, filter y reduce para manipular colecciones de datos de manera eficiente.",source:"@site/docs/avanzado/funcional.md",sourceDirName:"avanzado",slug:"/avanzado/funcional",permalink:"/docs/avanzado/funcional",draft:!1,editUrl:"https://github.com/jesquiliche/js_curso/edit/main/docs/avanzado/funcional.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Cap\xedtulo 13: APIs Web y Fetch",permalink:"/docs/avanzado/fecth"},next:{title:"Parte 4: Herramientas y Buenas Pr\xe1cticas",permalink:"/docs/category/parte-4-herramientas-y-buenas-pr\xe1cticas"}},c={},l=[{value:"Funciones de Orden Superior",id:"funciones-de-orden-superior",level:2},{value:"Ejemplo de Funci\xf3n de Orden Superior",id:"ejemplo-de-funci\xf3n-de-orden-superior",level:3},{value:"Inmutabilidad y Pureza de Funciones",id:"inmutabilidad-y-pureza-de-funciones",level:2},{value:"Inmutabilidad",id:"inmutabilidad",level:3},{value:"Pureza de Funciones",id:"pureza-de-funciones",level:3},{value:"Ejemplo de Funci\xf3n Pura",id:"ejemplo-de-funci\xf3n-pura",level:3},{value:"M\xe9todos <code>map</code>, <code>filter</code> y <code>reduce</code>",id:"m\xe9todos-map-filter-y-reduce",level:2},{value:"<code>map</code>",id:"map",level:3},{value:"<code>filter</code>",id:"filter",level:3},{value:"<code>reduce</code>",id:"reduce",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}],d={toc:l},s="wrapper";function p(e){let{components:a,...n}=e;return(0,r.kt)(s,(0,o.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cap\xedtulo-14-programaci\xf3n-funcional"},"Cap\xedtulo 14: Programaci\xf3n Funcional"),(0,r.kt)("p",null,"La programaci\xf3n funcional es un paradigma de programaci\xf3n que trata las computaciones como evaluaciones de funciones matem\xe1ticas y evita el cambio de estado y la mutaci\xf3n de datos. En JavaScript, este enfoque se basa en el uso de funciones de orden superior, la inmutabilidad de datos y el uso de funciones puras, as\xed como en el uso de m\xe9todos como ",(0,r.kt)("inlineCode",{parentName:"p"},"map"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," y ",(0,r.kt)("inlineCode",{parentName:"p"},"reduce")," para manipular colecciones de datos de manera eficiente."),(0,r.kt)("h2",{id:"funciones-de-orden-superior"},"Funciones de Orden Superior"),(0,r.kt)("p",null,"Las funciones de orden superior son aquellas que pueden recibir funciones como argumentos o devolver otras funciones como resultado. En JavaScript, esto se puede lograr gracias al hecho de que las funciones son tratadas como ciudadanos de primera clase, lo que permite una gran flexibilidad en el manejo y composici\xf3n de funciones."),(0,r.kt)("h3",{id:"ejemplo-de-funci\xf3n-de-orden-superior"},"Ejemplo de Funci\xf3n de Orden Superior"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Funci\xf3n de orden superior que recibe otra funci\xf3n como argumento\nfunction operacionMatematica(numero, operacion) {\n    return operacion(numero);\n}\n\n// Funciones que se pueden pasar como argumento\nfunction cuadrado(x) {\n    return x * x;\n}\n\nfunction cubo(x) {\n    return x * x * x;\n}\n\nconsole.log(operacionMatematica(3, cuadrado)); // Devuelve 9 (3 al cuadrado)\nconsole.log(operacionMatematica(3, cubo)); // Devuelve 27 (3 al cubo)\n")),(0,r.kt)("h2",{id:"inmutabilidad-y-pureza-de-funciones"},"Inmutabilidad y Pureza de Funciones"),(0,r.kt)("h3",{id:"inmutabilidad"},"Inmutabilidad"),(0,r.kt)("p",null,"La inmutabilidad se refiere a la incapacidad de cambiar un objeto una vez que ha sido creado. En JavaScript, los objetos primitivos como cadenas y n\xfameros son inmutables, pero los objetos complejos como arrays y objetos pueden ser mutables. La inmutabilidad se promueve creando nuevos objetos en lugar de modificar los existentes, lo cual facilita la gesti\xf3n de estados y reduce los errores inesperados."),(0,r.kt)("h3",{id:"pureza-de-funciones"},"Pureza de Funciones"),(0,r.kt)("p",null,"Una funci\xf3n pura es aquella que, dada la misma entrada, siempre produce el mismo resultado y no tiene efectos secundarios observables fuera de la funci\xf3n. Esto facilita el razonamiento sobre el c\xf3digo y reduce los errores, ya que no depende de variables globales o estados cambiantes."),(0,r.kt)("h3",{id:"ejemplo-de-funci\xf3n-pura"},"Ejemplo de Funci\xf3n Pura"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Funci\xf3n impura (depende de una variable externa mutable)\nlet contador = 0;\nfunction sumar(num) {\n    contador += num;\n    return contador;\n}\n\nconsole.log(sumar(5)); // Devuelve 5\nconsole.log(sumar(3)); // Devuelve 8\n\n// Funci\xf3n pura (no depende de variables externas y no tiene efectos secundarios)\nfunction sumarPuro(a, b) {\n    return a + b;\n}\n\nconsole.log(sumarPuro(5, 3)); // Devuelve 8\nconsole.log(sumarPuro(5, 3)); // Devuelve 8 (siempre el mismo resultado)\n")),(0,r.kt)("h2",{id:"m\xe9todos-map-filter-y-reduce"},"M\xe9todos ",(0,r.kt)("inlineCode",{parentName:"h2"},"map"),", ",(0,r.kt)("inlineCode",{parentName:"h2"},"filter")," y ",(0,r.kt)("inlineCode",{parentName:"h2"},"reduce")),(0,r.kt)("p",null,"Estos m\xe9todos son fundamentales en programaci\xf3n funcional para transformar y reducir colecciones de datos de manera declarativa."),(0,r.kt)("h3",{id:"map"},(0,r.kt)("inlineCode",{parentName:"h3"},"map")),(0,r.kt)("p",null,"El m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," crea un nuevo array con los resultados de aplicar una funci\xf3n a cada elemento del array original."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const numeros = [1, 2, 3, 4, 5];\n\nconst cuadrados = numeros.map(x => x * x);\n\nconsole.log(cuadrados); // Devuelve [1, 4, 9, 16, 25]\n")),(0,r.kt)("h3",{id:"filter"},(0,r.kt)("inlineCode",{parentName:"h3"},"filter")),(0,r.kt)("p",null,"El m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," crea un nuevo array con todos los elementos que pasan una prueba implementada por la funci\xf3n proporcionada."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const numeros = [1, 2, 3, 4, 5];\n\nconst pares = numeros.filter(x => x % 2 === 0);\n\nconsole.log(pares); // Devuelve [2, 4]\n")),(0,r.kt)("h3",{id:"reduce"},(0,r.kt)("inlineCode",{parentName:"h3"},"reduce")),(0,r.kt)("p",null,"El m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"reduce")," aplica una funci\xf3n a un acumulador y a cada elemento de un array (de izquierda a derecha) para reducirlo a un \xfanico valor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const numeros = [1, 2, 3, 4, 5];\n\nconst suma = numeros.reduce((acumulador, valorActual) => acumulador + valorActual, 0);\n\nconsole.log(suma); // Devuelve 15 (suma de todos los elementos del array)\n")),(0,r.kt)("h2",{id:"conclusi\xf3n"},"Conclusi\xf3n"),(0,r.kt)("p",null,"La programaci\xf3n funcional en JavaScript ofrece herramientas poderosas como funciones de orden superior, inmutabilidad y funciones puras, junto con m\xe9todos como ",(0,r.kt)("inlineCode",{parentName:"p"},"map"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," y ",(0,r.kt)("inlineCode",{parentName:"p"},"reduce"),", que permiten escribir c\xf3digo m\xe1s claro, conciso y mantenible. Adoptar estos principios puede mejorar la calidad y la eficiencia de tu c\xf3digo, facilitando el manejo de datos y la gesti\xf3n de estados en aplicaciones complejas."))}p.isMDXComponent=!0}}]);