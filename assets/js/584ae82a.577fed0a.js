"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[8879],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>k});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),l=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):c(c({},a),e)),n},p=function(e){var a=l(e.components);return t.createElement(s.Provider,{value:a},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?t.createElement(k,c(c({ref:a},p),{},{components:n})):t.createElement(k,c({ref:a},p))}));function k(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=m;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[u]="string"==typeof e?e:r,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1021:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=n(7462),r=(n(7294),n(3905));const o={sidebar_position:4},c="Cap\xedtulo 11: Asincron\xeda en JavaScript",i={unversionedId:"intermedio/asincronia",id:"intermedio/asincronia",title:"Cap\xedtulo 11: Asincron\xeda en JavaScript",description:"Introducci\xf3n",source:"@site/docs/intermedio/asincronia.md",sourceDirName:"intermedio",slug:"/intermedio/asincronia",permalink:"/docs/intermedio/asincronia",draft:!1,editUrl:"https://github.com/jesquiliche/js_curso/edit/main/docs/intermedio/asincronia.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Cap\xedtulo 10: Manejo de Errores y Depuraci\xf3n en JavaScript",permalink:"/docs/intermedio/errores"},next:{title:"Parte 3: JavaScript Avanzado",permalink:"/docs/category/parte-3-javascript-avanzado"}},s={},l=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Callbacks",id:"callbacks",level:2},{value:"\xbfQu\xe9 es un Callback?",id:"qu\xe9-es-un-callback",level:3},{value:"Ejemplo B\xe1sico de Callback",id:"ejemplo-b\xe1sico-de-callback",level:3},{value:"Callbacks Anidados y el &quot;Callback Hell&quot;",id:"callbacks-anidados-y-el-callback-hell",level:3},{value:"Promesas",id:"promesas",level:2},{value:"\xbfQu\xe9 es una Promesa?",id:"qu\xe9-es-una-promesa",level:3},{value:"Creaci\xf3n y Uso de Promesas",id:"creaci\xf3n-y-uso-de-promesas",level:3},{value:"Encadenamiento de Promesas",id:"encadenamiento-de-promesas",level:3},{value:"Async/Await",id:"asyncawait",level:2},{value:"\xbfQu\xe9 es Async/Await?",id:"qu\xe9-es-asyncawait",level:3},{value:"Funciones As\xedncronas",id:"funciones-as\xedncronas",level:3},{value:"Ventajas de Async/Await",id:"ventajas-de-asyncawait",level:3},{value:"Ejemplo Pr\xe1ctico Completo",id:"ejemplo-pr\xe1ctico-completo",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}],p={toc:l},u="wrapper";function d(e){let{components:a,...n}=e;return(0,r.kt)(u,(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cap\xedtulo-11-asincron\xeda-en-javascript"},"Cap\xedtulo 11: Asincron\xeda en JavaScript"),(0,r.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,r.kt)("p",null,"La asincron\xeda es una caracter\xedstica fundamental en JavaScript que permite realizar operaciones sin bloquear el hilo principal de ejecuci\xf3n. Esto es crucial para aplicaciones web que necesitan ser r\xe1pidas y responsivas. En este cap\xedtulo, exploraremos tres formas principales de manejar la asincron\xeda en JavaScript: callbacks, promesas y ",(0,r.kt)("inlineCode",{parentName:"p"},"async/await"),"."),(0,r.kt)("h2",{id:"callbacks"},"Callbacks"),(0,r.kt)("h3",{id:"qu\xe9-es-un-callback"},"\xbfQu\xe9 es un Callback?"),(0,r.kt)("p",null,"Un callback es una funci\xf3n que se pasa como argumento a otra funci\xf3n y se ejecuta despu\xe9s de que la primera funci\xf3n haya completado su tarea. Los callbacks son una de las formas m\xe1s antiguas y b\xe1sicas de manejar la asincron\xeda en JavaScript."),(0,r.kt)("h3",{id:"ejemplo-b\xe1sico-de-callback"},"Ejemplo B\xe1sico de Callback"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"HTML:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="es">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Callbacks en JavaScript</title>\n</head>\n<body>\n    <button id="miBoton">Hacer algo</button>\n    <script src="app.js"><\/script>\n</body>\n</html>\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"JavaScript (app.js):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const boton = document.getElementById('miBoton');\n\nfunction hacerAlgoDespues(callback) {\n    console.log('Haciendo algo...');\n    setTimeout(callback, 2000); // Simula una tarea asincr\xf3nica con un retraso de 2 segundos\n}\n\nboton.addEventListener('click', function() {\n    hacerAlgoDespues(function() {\n        console.log('Hecho despu\xe9s de 2 segundos');\n    });\n});\n")),(0,r.kt)("h3",{id:"callbacks-anidados-y-el-callback-hell"},'Callbacks Anidados y el "Callback Hell"'),(0,r.kt)("p",null,'Los callbacks pueden volverse dif\xedciles de manejar cuando se anidan varios uno dentro de otro, lo que se conoce como "callback hell".'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo de Callback Hell:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"hacerAlgoDespues(function() {\n    console.log('Primera tarea completa');\n    hacerAlgoDespues(function() {\n        console.log('Segunda tarea completa');\n        hacerAlgoDespues(function() {\n            console.log('Tercera tarea completa');\n        });\n    });\n});\n")),(0,r.kt)("h2",{id:"promesas"},"Promesas"),(0,r.kt)("h3",{id:"qu\xe9-es-una-promesa"},"\xbfQu\xe9 es una Promesa?"),(0,r.kt)("p",null,"Una promesa es un objeto que representa un valor que puede estar disponible ahora, en el futuro o nunca. Las promesas proporcionan una forma m\xe1s limpia y manejable de trabajar con asincron\xeda comparado con los callbacks anidados."),(0,r.kt)("h3",{id:"creaci\xf3n-y-uso-de-promesas"},"Creaci\xf3n y Uso de Promesas"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo B\xe1sico de Promesa:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const miPromesa = new Promise((resolve, reject) => {\n    setTimeout(() => {\n        const exito = true; // Simula una condici\xf3n de \xe9xito o fracaso\n        if (exito) {\n            resolve('Operaci\xf3n exitosa');\n        } else {\n            reject('Operaci\xf3n fallida');\n        }\n    }, 2000);\n});\n\nmiPromesa\n    .then((mensaje) => {\n        console.log(mensaje); // 'Operaci\xf3n exitosa'\n    })\n    .catch((error) => {\n        console.error(error); // 'Operaci\xf3n fallida'\n    });\n")),(0,r.kt)("h3",{id:"encadenamiento-de-promesas"},"Encadenamiento de Promesas"),(0,r.kt)("p",null,"Las promesas permiten el encadenamiento, lo que facilita manejar m\xfaltiples tareas asincr\xf3nicas de manera secuencial."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo de Encadenamiento:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"miPromesa\n    .then((mensaje) => {\n        console.log(mensaje); // 'Operaci\xf3n exitosa'\n        return 'Siguiente operaci\xf3n';\n    })\n    .then((mensaje) => {\n        console.log(mensaje); // 'Siguiente operaci\xf3n'\n    })\n    .catch((error) => {\n        console.error(error); // 'Operaci\xf3n fallida'\n    });\n")),(0,r.kt)("h2",{id:"asyncawait"},"Async/Await"),(0,r.kt)("h3",{id:"qu\xe9-es-asyncawait"},"\xbfQu\xe9 es Async/Await?"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"async/await")," es una sintaxis m\xe1s moderna y legible para trabajar con promesas. ",(0,r.kt)("inlineCode",{parentName:"p"},"async")," se utiliza para declarar una funci\xf3n as\xedncrona, y ",(0,r.kt)("inlineCode",{parentName:"p"},"await")," se utiliza dentro de funciones as\xedncronas para esperar una promesa."),(0,r.kt)("h3",{id:"funciones-as\xedncronas"},"Funciones As\xedncronas"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo B\xe1sico de Async/Await:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"async function miFuncionAsincrona() {\n    try {\n        const mensaje = await miPromesa;\n        console.log(mensaje); // 'Operaci\xf3n exitosa'\n    } catch (error) {\n        console.error(error); // 'Operaci\xf3n fallida'\n    }\n}\n\nmiFuncionAsincrona();\n")),(0,r.kt)("h3",{id:"ventajas-de-asyncawait"},"Ventajas de Async/Await"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"async/await")," hace que el c\xf3digo asincr\xf3nico se parezca m\xe1s al c\xf3digo sincr\xf3nico, lo que lo hace m\xe1s f\xe1cil de entender y mantener."),(0,r.kt)("h3",{id:"ejemplo-pr\xe1ctico-completo"},"Ejemplo Pr\xe1ctico Completo"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"HTML:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="es">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Async/Await en JavaScript</title>\n</head>\n<body>\n    <button id="miBoton">Cargar datos</button>\n    <div id="resultado"></div>\n    <script src="app.js"><\/script>\n</body>\n</html>\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"JavaScript (app.js):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const boton = document.getElementById('miBoton');\nconst resultado = document.getElementById('resultado');\n\nboton.addEventListener('click', async function() {\n    try {\n        const datos = await cargarDatos();\n        resultado.innerText = datos;\n    } catch (error) {\n        resultado.innerText = 'Error al cargar datos';\n        console.error(error);\n    }\n});\n\nfunction cargarDatos() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const exito = true; // Simula una condici\xf3n de \xe9xito o fracaso\n            if (exito) {\n                resolve('Datos cargados correctamente');\n            } else {\n                reject('Error al cargar datos');\n            }\n        }, 2000);\n    });\n}\n")),(0,r.kt)("h2",{id:"conclusi\xf3n"},"Conclusi\xf3n"),(0,r.kt)("p",null,"La asincron\xeda es una parte esencial de JavaScript que permite crear aplicaciones web r\xe1pidas y eficientes. Desde los callbacks b\xe1sicos hasta las promesas y la sintaxis moderna de ",(0,r.kt)("inlineCode",{parentName:"p"},"async/await"),", cada m\xe9todo ofrece diferentes formas de manejar la asincron\xeda. Entender y utilizar estas t\xe9cnicas te permitir\xe1 escribir c\xf3digo m\xe1s claro, manejable y eficiente."))}d.isMDXComponent=!0}}]);