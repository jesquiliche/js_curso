"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[860],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>f});var o=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function t(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,o)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?t(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,o,r=function(e,n){if(null==e)return{};var a,o,r={},t=Object.keys(e);for(o=0;o<t.length;o++)a=t[o],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(o=0;o<t.length;o++)a=t[o],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=o.createContext({}),c=function(e){var n=o.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},u=function(e){var n=c(e.components);return o.createElement(i.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var a=e.components,r=e.mdxType,t=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(a),m=r,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||t;return a?o.createElement(f,l(l({ref:n},u),{},{components:a})):o.createElement(f,l({ref:n},u))}));function f(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var t=a.length,l=new Array(t);l[0]=m;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<t;c++)l[c]=a[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7070:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>s,toc:()=>c});var o=a(7462),r=(a(7294),a(3905));const t={sidebar_position:4},l="Funciones",s={unversionedId:"funadamentos/funciones",id:"funadamentos/funciones",title:"Funciones",description:"Introducci\xf3n",source:"@site/docs/funadamentos/funciones.md",sourceDirName:"funadamentos",slug:"/funadamentos/funciones",permalink:"/js_curso/docs/funadamentos/funciones",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/funadamentos/funciones.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Estructuras de Control",permalink:"/js_curso/docs/funadamentos/control"},next:{title:"Objetos y arrays",permalink:"/js_curso/docs/funadamentos/objetos"}},i={},c=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Declaraci\xf3n y Expresi\xf3n de Funciones",id:"declaraci\xf3n-y-expresi\xf3n-de-funciones",level:2},{value:"Declaraci\xf3n de Funciones",id:"declaraci\xf3n-de-funciones",level:3},{value:"Expresi\xf3n de Funciones",id:"expresi\xf3n-de-funciones",level:3},{value:"Funciones Flecha",id:"funciones-flecha",level:3},{value:"Par\xe1metros y Valores de Retorno",id:"par\xe1metros-y-valores-de-retorno",level:2},{value:"Par\xe1metros",id:"par\xe1metros",level:3},{value:"Valores por Defecto",id:"valores-por-defecto",level:3},{value:"Valores de Retorno",id:"valores-de-retorno",level:3},{value:"Scope y Contexto (<code>this</code>)",id:"scope-y-contexto-this",level:3},{value:"Scope",id:"scope",level:3},{value:"Contexto (<code>this</code>)",id:"contexto-this",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}],u={toc:c},p="wrapper";function d(e){let{components:n,...a}=e;return(0,r.kt)(p,(0,o.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"funciones"},"Funciones"),(0,r.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,r.kt)("p",null,"Las funciones son bloques de c\xf3digo reutilizables que realizan una tarea espec\xedfica. En JavaScript, las funciones son ciudadanos de primera clase, lo que significa que pueden ser asignadas a variables, pasadas como argumentos a otras funciones y devueltas desde otras funciones. Este cap\xedtulo explorar\xe1 c\xf3mo declarar y usar funciones, trabajar con par\xe1metros y valores de retorno, y entender el scope y el contexto (",(0,r.kt)("inlineCode",{parentName:"p"},"this"),") en JavaScript."),(0,r.kt)("h2",{id:"declaraci\xf3n-y-expresi\xf3n-de-funciones"},"Declaraci\xf3n y Expresi\xf3n de Funciones"),(0,r.kt)("h3",{id:"declaraci\xf3n-de-funciones"},"Declaraci\xf3n de Funciones"),(0,r.kt)("p",null,"Una declaraci\xf3n de funci\xf3n define una funci\xf3n con el nombre proporcionado y un cuerpo de c\xf3digo que se ejecuta cuando se llama a la funci\xf3n."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Sintaxis:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function nombreDeFuncion(par\xe1metros) {\n    // cuerpo de la funci\xf3n\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'function saludar(nombre) {\n    console.log("Hola, " + nombre + "!");\n}\n\nsaludar("Juan"); // Salida: "Hola, Juan!"\n')),(0,r.kt)("h3",{id:"expresi\xf3n-de-funciones"},"Expresi\xf3n de Funciones"),(0,r.kt)("p",null,"Una expresi\xf3n de funci\xf3n define una funci\xf3n dentro de una expresi\xf3n y puede ser an\xf3nima (sin nombre). Las expresiones de funciones no se elevan (hoisted), lo que significa que no se pueden llamar antes de ser definidas."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Sintaxis:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const nombreDeFuncion = function(par\xe1metros) {\n    // cuerpo de la funci\xf3n\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const saludar = function(nombre) {\n    console.log("Hola, " + nombre + "!");\n};\n\nsaludar("Mar\xeda"); // Salida: "Hola, Mar\xeda!"\n')),(0,r.kt)("h3",{id:"funciones-flecha"},"Funciones Flecha"),(0,r.kt)("p",null,"Las funciones flecha proporcionan una sintaxis m\xe1s concisa para escribir funciones. No tienen su propio ",(0,r.kt)("inlineCode",{parentName:"p"},"this"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"arguments"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"super")," o ",(0,r.kt)("inlineCode",{parentName:"p"},"new.target"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Sintaxis:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const nombreDeFuncion = (par\xe1metros) => {\n    // cuerpo de la funci\xf3n\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const saludar = (nombre) => {\n    console.log("Hola, " + nombre + "!");\n};\n\nsaludar("Carlos"); // Salida: "Hola, Carlos!"\n')),(0,r.kt)("h2",{id:"par\xe1metros-y-valores-de-retorno"},"Par\xe1metros y Valores de Retorno"),(0,r.kt)("h3",{id:"par\xe1metros"},"Par\xe1metros"),(0,r.kt)("p",null,"Las funciones pueden aceptar par\xe1metros, que son valores pasados a la funci\xf3n cuando se llama."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function sumar(a, b) {\n    return a + b;\n}\n\nconsole.log(sumar(2, 3)); // Salida: 5\n")),(0,r.kt)("h3",{id:"valores-por-defecto"},"Valores por Defecto"),(0,r.kt)("p",null,"Puedes asignar valores por defecto a los par\xe1metros para que se utilicen si no se proporciona ning\xfan valor al llamar a la funci\xf3n."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'function saludar(nombre = "Desconocido") {\n    console.log("Hola, " + nombre + "!");\n}\n\nsaludar(); // Salida: "Hola, Desconocido!"\n')),(0,r.kt)("h3",{id:"valores-de-retorno"},"Valores de Retorno"),(0,r.kt)("p",null,"Las funciones pueden devolver valores usando la palabra clave ",(0,r.kt)("inlineCode",{parentName:"p"},"return"),". Si no se especifica un valor de retorno, la funci\xf3n devuelve ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," por defecto."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function multiplicar(a, b) {\n    return a * b;\n}\n\nlet resultado = multiplicar(4, 5);\nconsole.log(resultado); // Salida: 20\n")),(0,r.kt)("h3",{id:"scope-y-contexto-this"},"Scope y Contexto (",(0,r.kt)("inlineCode",{parentName:"h3"},"this"),")"),(0,r.kt)("h3",{id:"scope"},"Scope"),(0,r.kt)("p",null,"El scope define el contexto en el cual las variables est\xe1n disponibles para su uso. JavaScript tiene dos tipos principales de scope: global y local."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Scope Global"),": Variables declaradas fuera de cualquier funci\xf3n tienen un scope global y est\xe1n disponibles en cualquier parte del c\xf3digo.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Scope Local"),": Variables declaradas dentro de una funci\xf3n tienen un scope local y solo est\xe1n disponibles dentro de esa funci\xf3n."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let globalVar = "Soy global";\n\nfunction miFuncion() {\n    let localVar = "Soy local";\n    console.log(globalVar); // Salida: "Soy global"\n    console.log(localVar);  // Salida: "Soy local"\n}\n\nmiFuncion();\nconsole.log(localVar); // Error: localVar is not defined\n')),(0,r.kt)("h3",{id:"contexto-this"},"Contexto (",(0,r.kt)("inlineCode",{parentName:"h3"},"this"),")"),(0,r.kt)("p",null,"El contexto, o ",(0,r.kt)("inlineCode",{parentName:"p"},"this"),", se refiere al objeto desde el cual se invoc\xf3 la funci\xf3n. El valor de ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," depende de c\xf3mo se llama a la funci\xf3n."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"En el contexto global:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(this); // En el navegador, `this` se refiere al objeto `window`.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Dentro de un objeto:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const persona = {\n    nombre: "Juan",\n    saludar: function() {\n        console.log("Hola, " + this.nombre + "!");\n    }\n};\n\npersona.saludar(); // Salida: "Hola, Juan!" (this se refiere a persona)\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"En una funci\xf3n:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function mostrarThis() {\n    console.log(this);\n}\n\nmostrarThis(); // En el navegador, `this` se refiere al objeto `window`.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"En una funci\xf3n flecha:")),(0,r.kt)("p",null,"Las funciones flecha no tienen su propio ",(0,r.kt)("inlineCode",{parentName:"p"},"this"),". Heredan el ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," del contexto en el cual fueron definidas."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const persona = {\n    nombre: "Ana",\n    saludar: () => {\n        console.log("Hola, " + this.nombre + "!"); // `this` se refiere al contexto global\n    }\n};\n\npersona.saludar(); // Salida: "Hola, undefined!"\n')),(0,r.kt)("h2",{id:"conclusi\xf3n"},"Conclusi\xf3n"),(0,r.kt)("p",null,"Las funciones son una parte fundamental de JavaScript, permitiendo encapsular l\xf3gica y reutilizar c\xf3digo. Entender c\xf3mo declarar y usar funciones, trabajar con par\xe1metros y valores de retorno, y manejar el scope y el contexto (",(0,r.kt)("inlineCode",{parentName:"p"},"this"),") te permitir\xe1 escribir c\xf3digo m\xe1s modular y eficiente. Con la pr\xe1ctica, te familiarizar\xe1s con las distintas formas de definir y utilizar funciones en tus programas JavaScript."))}d.isMDXComponent=!0}}]);