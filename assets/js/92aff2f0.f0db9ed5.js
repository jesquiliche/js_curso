"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[4092],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>v});var o=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function t(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,o,r=function(e,a){if(null==e)return{};var n,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),d=function(e){var a=o.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):t(t({},a),e)),n},p=function(e){var a=d(e.components);return o.createElement(s.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},m=o.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(n),m=r,v=c["".concat(s,".").concat(m)]||c[m]||u[m]||l;return n?o.createElement(v,t(t({ref:a},p),{},{components:n})):o.createElement(v,t({ref:a},p))}));function v(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,t=new Array(l);t[0]=m;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[c]="string"==typeof e?e:r,t[1]=i;for(var d=2;d<l;d++)t[d]=n[d];return o.createElement.apply(null,t)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6252:(e,a,n)=>{n.d(a,{Z:()=>r});var o=n(7294);const r=e=>{let{questions:a}=e;const[n,r]=(0,o.useState)(0),[l,t]=(0,o.useState)(!1),[i,s]=(0,o.useState)({}),[d,p]=(0,o.useState)({});return o.createElement("div",null,o.createElement("h2",null,"Test de conocimientos"),l?o.createElement("div",null,o.createElement("p",null,"Tu puntuaci\xf3n es: ",n,"/",a.length),a.map(((e,a)=>o.createElement("div",{key:a},o.createElement("h3",null,o.createElement("b",null,"Pregunta ",a+1)),o.createElement("h4",null,e.question),o.createElement("p",null,"Tu respuesta: ",i[a]),o.createElement("p",{className:"correct"},"Esta respuesta es: ",d[a]),"incorrecto"===d[a]&&o.createElement("p",{className:"incorrect"},"La respuesta correcta es: ",e.answer))))):o.createElement("form",{onSubmit:e=>{e.preventDefault();let n=0;const o={};a.forEach(((e,a)=>{i[a]===e.answer?(n+=1,o[a]="correcta"):o[a]="incorrecta"})),r(n),p(o),t(!0)}},a&&a.map(((e,a)=>o.createElement("div",{key:a},o.createElement("h3",null,o.createElement("b",null,"Pregunta ",a+1)),o.createElement("h4",{className:"option"},e.question),e.options.map((e=>o.createElement("div",{key:e},o.createElement("input",{type:"radio",id:`question-${a}-${e}`,name:`question-${a}`,value:e,onChange:e=>((e,a)=>{const{value:n}=e.target;s((e=>({...e,[a]:n})))})(e,a),required:!0}),o.createElement("label",{htmlFor:`question-${a}-${e}`},e))))))),o.createElement("button",{type:"submit",className:"quiz-button mt-4"},"Corregir")))}},9248:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>t,metadata:()=>s,toc:()=>p});var o=n(7462),r=(n(7294),n(3905)),l=n(6252);const t={sidebar_position:3},i="Operadores",s={unversionedId:"funadamentos/operadores",id:"funadamentos/operadores",title:"Operadores",description:"Introducci\xf3n",source:"@site/docs/funadamentos/operadores.mdx",sourceDirName:"funadamentos",slug:"/funadamentos/operadores",permalink:"/docs/funadamentos/operadores",draft:!1,editUrl:"https://github.com/jesquiliche/js_curso/edit/main/docs/funadamentos/operadores.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Sintaxis B\xe1sica",permalink:"/docs/funadamentos/sintaxis"},next:{title:"Estructuras de Control",permalink:"/docs/funadamentos/control"}},d={},p=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Operadores Aritm\xe9ticos",id:"operadores-aritm\xe9ticos",level:2},{value:"Operadores de Asignaci\xf3n",id:"operadores-de-asignaci\xf3n",level:2},{value:"Operadores de Comparaci\xf3n",id:"operadores-de-comparaci\xf3n",level:2},{value:"Operadores L\xf3gicos",id:"operadores-l\xf3gicos",level:2},{value:"Operadores de Cadena",id:"operadores-de-cadena",level:2},{value:"Operador Condicional (Ternario)",id:"operador-condicional-ternario",level:2},{value:"Operador de tipo (<code>typeof</code>)",id:"operador-de-tipo-typeof",level:2},{value:"Operador de eliminaci\xf3n (<code>delete</code>)",id:"operador-de-eliminaci\xf3n-delete",level:2},{value:"Operador de desestructuraci\xf3n",id:"operador-de-desestructuraci\xf3n",level:2},{value:"Operador de Propagaci\xf3n en JavaScript",id:"operador-de-propagaci\xf3n-en-javascript",level:2},{value:"Usos del Operador de Propagaci\xf3n",id:"usos-del-operador-de-propagaci\xf3n",level:3},{value:"1. Expansi\xf3n de Arrays",id:"1-expansi\xf3n-de-arrays",level:4},{value:"Ejemplo:",id:"ejemplo",level:5},{value:"2. Copia de Arrays",id:"2-copia-de-arrays",level:4},{value:"Ejemplo:",id:"ejemplo-1",level:5},{value:"3. Concatenaci\xf3n de Arrays",id:"3-concatenaci\xf3n-de-arrays",level:4},{value:"Ejemplo:",id:"ejemplo-2",level:5},{value:"4. Expansi\xf3n de Objetos",id:"4-expansi\xf3n-de-objetos",level:4},{value:"Ejemplo:",id:"ejemplo-3",level:5},{value:"5. Par\xe1metros de Funci\xf3n",id:"5-par\xe1metros-de-funci\xf3n",level:4},{value:"Ejemplo:",id:"ejemplo-4",level:5},{value:"6. Conversiones",id:"6-conversiones",level:4},{value:"Ejemplo:",id:"ejemplo-5",level:5},{value:"Ejemplos Adicionales",id:"ejemplos-adicionales",level:3},{value:"Copia Superficial de Objetos",id:"copia-superficial-de-objetos",level:4},{value:"Combinaci\xf3n de Objetos con Propiedades Adicionales",id:"combinaci\xf3n-de-objetos-con-propiedades-adicionales",level:4},{value:"Funciones Vari\xe1dicas",id:"funciones-vari\xe1dicas",level:4},{value:"Ejemplo:",id:"ejemplo-6",level:5},{value:"Operador de Cortocircuito",id:"operador-de-cortocircuito",level:2},{value:"Operador AND (<code>&amp;&amp;</code>)",id:"operador-and-",level:3},{value:"Ejemplos:",id:"ejemplos",level:4},{value:"Evaluaci\xf3n de Condiciones:",id:"evaluaci\xf3n-de-condiciones",level:5},{value:"Retorno de Valores:",id:"retorno-de-valores",level:5},{value:"Uso Com\xfan:",id:"uso-com\xfan",level:4},{value:"Operador OR (<code>||</code>)",id:"operador-or-",level:3},{value:"Ejemplos:",id:"ejemplos-1",level:4},{value:"Evaluaci\xf3n de Condiciones:",id:"evaluaci\xf3n-de-condiciones-1",level:5},{value:"Retorno de Valores:",id:"retorno-de-valores-1",level:5},{value:"Uso Com\xfan:",id:"uso-com\xfan-1",level:4},{value:"Operador de Coalescencia Nula (<code>??</code>)",id:"operador-de-coalescencia-nula-",level:3},{value:"Ejemplos:",id:"ejemplos-2",level:4},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2},{value:"Operador de Incremento y Decremento",id:"operador-de-incremento-y-decremento",level:2},{value:"Operador de Incremento (<code>++</code>)",id:"operador-de-incremento-",level:3},{value:"Forma Postfija (x++)",id:"forma-postfija-x",level:4},{value:"Ejemplo:",id:"ejemplo-7",level:5},{value:"Forma Prefija (++x)",id:"forma-prefija-x",level:4},{value:"Ejemplo:",id:"ejemplo-8",level:5},{value:"Operador de Decremento (<code>--</code>)",id:"operador-de-decremento---",level:3},{value:"Forma Postfija (x--)",id:"forma-postfija-x--",level:4},{value:"Ejemplo:",id:"ejemplo-9",level:5},{value:"Forma Prefija (--x)",id:"forma-prefija---x",level:4},{value:"Ejemplo:",id:"ejemplo-10",level:5},{value:"Comparaci\xf3n entre Forma Prefija y Postfija",id:"comparaci\xf3n-entre-forma-prefija-y-postfija",level:3},{value:"Ejemplo Comparativo:",id:"ejemplo-comparativo",level:4},{value:"Usos Comunes",id:"usos-comunes",level:3},{value:"Bucles",id:"bucles",level:4},{value:"Ejemplo:",id:"ejemplo-11",level:5},{value:"Operaciones Simples",id:"operaciones-simples",level:4},{value:"Ejemplo:",id:"ejemplo-12",level:5},{value:"Conclusi\xf3n",id:"conclusi\xf3n-1",level:2},{value:"Cuestionario de JavaScript",id:"cuestionario-de-javascript",level:2}],c={toc:p},u="wrapper";function m(e){let{components:a,...n}=e;return(0,r.kt)(u,(0,o.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"operadores"},"Operadores"),(0,r.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,r.kt)("p",null,"Los operadores son s\xedmbolos que le indican al int\xe9rprete que realice una operaci\xf3n matem\xe1tica, l\xf3gica o de tipo espec\xedfico y producen un valor como resultado. En JavaScript, los operadores se dividen en varias categor\xedas: operadores aritm\xe9ticos, de asignaci\xf3n, de comparaci\xf3n, l\xf3gicos, de cadena, condicionales y de otros tipos. Este cap\xedtulo explorar\xe1 cada uno de estos operadores y c\xf3mo se utilizan."),(0,r.kt)("h2",{id:"operadores-aritm\xe9ticos"},"Operadores Aritm\xe9ticos"),(0,r.kt)("p",null,"Los operadores aritm\xe9ticos se utilizan para realizar operaciones matem\xe1ticas sobre n\xfameros."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Suma (",(0,r.kt)("inlineCode",{parentName:"strong"},"+"),")"),": Suma dos operandos."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Resta (",(0,r.kt)("inlineCode",{parentName:"strong"},"-"),")"),": Resta el segundo operando del primero."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Multiplicaci\xf3n (",(0,r.kt)("inlineCode",{parentName:"strong"},"*"),")"),": Multiplica dos operandos."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Divisi\xf3n (",(0,r.kt)("inlineCode",{parentName:"strong"},"/"),")"),": Divide el primer operando por el segundo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"M\xf3dulo (",(0,r.kt)("inlineCode",{parentName:"strong"},"%"),")"),": Devuelve el resto de la divisi\xf3n del primer operando por el segundo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Incremento (",(0,r.kt)("inlineCode",{parentName:"strong"},"++"),")"),": Incrementa el operando en uno."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Decremento (",(0,r.kt)("inlineCode",{parentName:"strong"},"--"),")"),": Decrementa el operando en uno.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let a = 10;\nlet b = 5;\n\nconsole.log(a + b); // Salida: 15\nconsole.log(a - b); // Salida: 5\nconsole.log(a * b); // Salida: 50\nconsole.log(a / b); // Salida: 2\nconsole.log(a % b); // Salida: 0\n\na++;\nconsole.log(a); // Salida: 11\n\nb--;\nconsole.log(b); // Salida: 4\n")),(0,r.kt)("h2",{id:"operadores-de-asignaci\xf3n"},"Operadores de Asignaci\xf3n"),(0,r.kt)("p",null,"Los operadores de asignaci\xf3n se utilizan para asignar valores a las variables."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Asignaci\xf3n (",(0,r.kt)("inlineCode",{parentName:"strong"},"="),")"),": Asigna el valor del operando derecho al operando izquierdo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Asignaci\xf3n de suma (",(0,r.kt)("inlineCode",{parentName:"strong"},"+="),")"),": Suma el operando derecho al operando izquierdo y asigna el resultado al operando izquierdo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Asignaci\xf3n de resta (",(0,r.kt)("inlineCode",{parentName:"strong"},"-="),")"),": Resta el operando derecho del operando izquierdo y asigna el resultado al operando izquierdo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Asignaci\xf3n de multiplicaci\xf3n (",(0,r.kt)("inlineCode",{parentName:"strong"},"*="),")"),": Multiplica el operando izquierdo por el derecho y asigna el resultado al operando izquierdo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Asignaci\xf3n de divisi\xf3n (",(0,r.kt)("inlineCode",{parentName:"strong"},"/="),")"),": Divide el operando izquierdo por el derecho y asigna el resultado al operando izquierdo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Asignaci\xf3n de m\xf3dulo (",(0,r.kt)("inlineCode",{parentName:"strong"},"%="),")"),": Calcula el m\xf3dulo del operando izquierdo con el derecho y asigna el resultado al operando izquierdo.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let x = 10;\n\nx += 5; // Equivalente a x = x + 5\nconsole.log(x); // Salida: 15\n\nx -= 3; // Equivalente a x = x - 3\nconsole.log(x); // Salida: 12\n\nx *= 2; // Equivalente a x = x * 2\nconsole.log(x); // Salida: 24\n\nx /= 4; // Equivalente a x = x / 4\nconsole.log(x); // Salida: 6\n\nx %= 2; // Equivalente a x = x % 2\nconsole.log(x); // Salida: 0\n")),(0,r.kt)("h2",{id:"operadores-de-comparaci\xf3n"},"Operadores de Comparaci\xf3n"),(0,r.kt)("p",null,"Los operadores de comparaci\xf3n se utilizan para comparar dos valores y devuelven un valor booleano (",(0,r.kt)("inlineCode",{parentName:"p"},"true")," o ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),")."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Igual (",(0,r.kt)("inlineCode",{parentName:"strong"},"=="),")"),": Devuelve ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," si los operandos son iguales (comparaci\xf3n no estricta)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"No igual (",(0,r.kt)("inlineCode",{parentName:"strong"},"!="),")"),": Devuelve ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," si los operandos no son iguales (comparaci\xf3n no estricta)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Estricto igual (",(0,r.kt)("inlineCode",{parentName:"strong"},"==="),")"),": Devuelve ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," si los operandos son iguales y del mismo tipo (comparaci\xf3n estricta)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Estricto no igual (",(0,r.kt)("inlineCode",{parentName:"strong"},"!=="),")"),": Devuelve ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," si los operandos no son iguales o no son del mismo tipo (comparaci\xf3n estricta)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Mayor que (",(0,r.kt)("inlineCode",{parentName:"strong"},">"),")"),": Devuelve ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," si el operando izquierdo es mayor que el derecho."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Mayor o igual que (",(0,r.kt)("inlineCode",{parentName:"strong"},">="),")"),": Devuelve ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," si el operando izquierdo es mayor o igual que el derecho."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Menor que (",(0,r.kt)("inlineCode",{parentName:"strong"},"<"),")"),": Devuelve ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," si el operando izquierdo es menor que el derecho."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Menor o igual que (",(0,r.kt)("inlineCode",{parentName:"strong"},"<="),")"),": Devuelve ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," si el operando izquierdo es menor o igual que el derecho.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let num1 = 10;\nlet num2 = 5;\n\nconsole.log(num1 == num2); // Salida: false\nconsole.log(num1 != num2); // Salida: true\nconsole.log(num1 === 10);  // Salida: true\nconsole.log(num1 !== "10");// Salida: true\nconsole.log(num1 > num2);  // Salida: true\nconsole.log(num1 >= 10);   // Salida: true\nconsole.log(num1 < 20);    // Salida: true\nconsole.log(num1 <= 10);   // Salida: true\n')),(0,r.kt)("h2",{id:"operadores-l\xf3gicos"},"Operadores L\xf3gicos"),(0,r.kt)("p",null,"Los operadores l\xf3gicos se utilizan para realizar operaciones l\xf3gicas sobre valores booleanos."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"AND (",(0,r.kt)("inlineCode",{parentName:"strong"},"&&"),")"),": Devuelve ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," si ambos operandos son ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"OR (",(0,r.kt)("inlineCode",{parentName:"strong"},"||"),")"),": Devuelve ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," si al menos uno de los operandos es ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"NOT (",(0,r.kt)("inlineCode",{parentName:"strong"},"!"),")"),": Invierte el valor booleano del operando.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let verdadero = true;\nlet falso = false;\n\nconsole.log(verdadero && falso); // Salida: false\nconsole.log(verdadero || falso); // Salida: true\nconsole.log(!verdadero);         // Salida: false\n")),(0,r.kt)("h2",{id:"operadores-de-cadena"},"Operadores de Cadena"),(0,r.kt)("p",null,"Los operadores de cadena se utilizan para concatenar cadenas de texto."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Concatenaci\xf3n (",(0,r.kt)("inlineCode",{parentName:"strong"},"+"),")"),": Combina dos cadenas de texto."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Concatenaci\xf3n y asignaci\xf3n (",(0,r.kt)("inlineCode",{parentName:"strong"},"+="),")"),": Combina una cadena con otra y asigna el resultado.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let saludo = "Hola";\nlet nombre = "Mundo";\n\nlet mensaje = saludo + ", " + nombre + "!";\nconsole.log(mensaje); // Salida: "Hola, Mundo!"\n\nsaludo += ", \xbfc\xf3mo est\xe1s?";\nconsole.log(saludo); // Salida: "Hola, \xbfc\xf3mo est\xe1s?"\n')),(0,r.kt)("h2",{id:"operador-condicional-ternario"},"Operador Condicional (Ternario)"),(0,r.kt)("p",null,"El operador condicional (",(0,r.kt)("inlineCode",{parentName:"p"},"? :"),") es una forma abreviada de la estructura ",(0,r.kt)("inlineCode",{parentName:"p"},"if...else")," y se utiliza para evaluar una expresi\xf3n y devolver un valor dependiendo de si la expresi\xf3n es ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," o ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Sintaxis:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"condicion ? expresion1 : expresion2\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let edad = 18;\nlet mensaje = (edad >= 18) ? "Eres mayor de edad" : "Eres menor de edad";\nconsole.log(mensaje); // Salida: "Eres mayor de edad"\n')),(0,r.kt)("h2",{id:"operador-de-tipo-typeof"},"Operador de tipo (",(0,r.kt)("inlineCode",{parentName:"h2"},"typeof"),")"),(0,r.kt)("p",null,"El operador ",(0,r.kt)("inlineCode",{parentName:"p"},"typeof")," devuelve una cadena que indica el tipo del operando."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log(typeof 42);        // Salida: "number"\nconsole.log(typeof "Hola");    // Salida: "string"\nconsole.log(typeof true);      // Salida: "boolean"\nconsole.log(typeof undefined); // Salida: "undefined"\nconsole.log(typeof null);      // Salida: "object" (esto es un error hist\xf3rico en JavaScript)\nconsole.log(typeof {});        // Salida: "object"\nconsole.log(typeof []);        // Salida: "object"\nconsole.log(typeof function(){}); // Salida: "function"\n')),(0,r.kt)("h2",{id:"operador-de-eliminaci\xf3n-delete"},"Operador de eliminaci\xf3n (",(0,r.kt)("inlineCode",{parentName:"h2"},"delete"),")"),(0,r.kt)("p",null,"El operador ",(0,r.kt)("inlineCode",{parentName:"p"},"delete")," elimina una propiedad de un objeto."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ejemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let objeto = { nombre: "Juan", edad: 30 };\ndelete objeto.edad;\nconsole.log(objeto); // Salida: { nombre: "Juan" }\n')),(0,r.kt)("h2",{id:"operador-de-desestructuraci\xf3n"},"Operador de desestructuraci\xf3n"),(0,r.kt)("p",null,"La desestructuraci\xf3n permite extraer valores de arrays u objetos y asignarlos a variables."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Desestructuraci\xf3n de Arrays:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let [a, b] = [1, 2];\nconsole.log(a); // Salida: 1\nconsole.log(b); // Salida: 2\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Desestructuraci\xf3n de Objetos:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let { nombre, edad } = { nombre: "Juan", edad: 30 };\nconsole.log(nombre); // Salida: "Juan"\nconsole.log(edad);   // Salida: 30\n')),(0,r.kt)("h2",{id:"operador-de-propagaci\xf3n-en-javascript"},"Operador de Propagaci\xf3n en JavaScript"),(0,r.kt)("p",null,"El operador de propagaci\xf3n (spread operator) en JavaScript, representado por tres puntos (",(0,r.kt)("inlineCode",{parentName:"p"},"..."),"), es una caracter\xedstica poderosa y vers\xe1til introducida en ECMAScript 2015 (ES6). Permite expandir elementos de arrays, objetos y otros iterables en lugares donde se esperan m\xfaltiples elementos."),(0,r.kt)("h3",{id:"usos-del-operador-de-propagaci\xf3n"},"Usos del Operador de Propagaci\xf3n"),(0,r.kt)("h4",{id:"1-expansi\xf3n-de-arrays"},"1. Expansi\xf3n de Arrays"),(0,r.kt)("p",null,"El operador de propagaci\xf3n puede usarse para expandir un array en elementos individuales."),(0,r.kt)("h5",{id:"ejemplo"},"Ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const numeros = [1, 2, 3];\nconsole.log(...numeros); // 1 2 3\n")),(0,r.kt)("h4",{id:"2-copia-de-arrays"},"2. Copia de Arrays"),(0,r.kt)("p",null,"Puedes crear una copia superficial de un array utilizando el operador de propagaci\xf3n."),(0,r.kt)("h5",{id:"ejemplo-1"},"Ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const original = [1, 2, 3];\nconst copia = [...original];\nconsole.log(copia); // [1, 2, 3]\n")),(0,r.kt)("h4",{id:"3-concatenaci\xf3n-de-arrays"},"3. Concatenaci\xf3n de Arrays"),(0,r.kt)("p",null,"Puedes combinar dos o m\xe1s arrays en uno solo de manera sencilla."),(0,r.kt)("h5",{id:"ejemplo-2"},"Ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconst combinado = [...array1, ...array2];\nconsole.log(combinado); // [1, 2, 3, 4, 5, 6]\n")),(0,r.kt)("h4",{id:"4-expansi\xf3n-de-objetos"},"4. Expansi\xf3n de Objetos"),(0,r.kt)("p",null,"A partir de ECMAScript 2018 (ES9), el operador de propagaci\xf3n tambi\xe9n puede usarse con objetos para copiar propiedades o combinar objetos."),(0,r.kt)("h5",{id:"ejemplo-3"},"Ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const objeto1 = { a: 1, b: 2 };\nconst objeto2 = { c: 3, d: 4 };\nconst combinadoObj = { ...objeto1, ...objeto2 };\nconsole.log(combinadoObj); // { a: 1, b: 2, c: 3, d: 4 }\n")),(0,r.kt)("h4",{id:"5-par\xe1metros-de-funci\xf3n"},"5. Par\xe1metros de Funci\xf3n"),(0,r.kt)("p",null,"El operador de propagaci\xf3n puede ser utilizado para pasar elementos de un array como argumentos individuales a una funci\xf3n."),(0,r.kt)("h5",{id:"ejemplo-4"},"Ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function suma(x, y, z) {\n    return x + y + z;\n}\n\nconst numeros = [1, 2, 3];\nconsole.log(suma(...numeros)); // 6\n")),(0,r.kt)("h4",{id:"6-conversiones"},"6. Conversiones"),(0,r.kt)("p",null,"El operador de propagaci\xf3n tambi\xe9n se puede utilizar para convertir ciertos objetos, como NodeLists y otros iterables, en arrays."),(0,r.kt)("h5",{id:"ejemplo-5"},"Ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const nodeList = document.querySelectorAll('p');\nconst arrayDeNodos = [...nodeList];\n")),(0,r.kt)("h3",{id:"ejemplos-adicionales"},"Ejemplos Adicionales"),(0,r.kt)("h4",{id:"copia-superficial-de-objetos"},"Copia Superficial de Objetos"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const objetoOriginal = { nombre: 'Alice', edad: 25 };\nconst copiaObjeto = { ...objetoOriginal };\nconsole.log(copiaObjeto); // { nombre: 'Alice', edad: 25 }\n")),(0,r.kt)("h4",{id:"combinaci\xf3n-de-objetos-con-propiedades-adicionales"},"Combinaci\xf3n de Objetos con Propiedades Adicionales"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const usuario = { nombre: 'Bob', edad: 30 };\nconst direccion = { ciudad: 'Madrid', pais: 'Espa\xf1a' };\n\nconst usuarioCompleto = { ...usuario, ...direccion };\nconsole.log(usuarioCompleto); // { nombre: 'Bob', edad: 30, ciudad: 'Madrid', pais: 'Espa\xf1a' }\n")),(0,r.kt)("h4",{id:"funciones-vari\xe1dicas"},"Funciones Vari\xe1dicas"),(0,r.kt)("p",null,"Funciones que aceptan un n\xfamero variable de argumentos pueden beneficiarse del operador de propagaci\xf3n para manejar esos argumentos."),(0,r.kt)("h5",{id:"ejemplo-6"},"Ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function sumarTodos(...numeros) {\n    return numeros.reduce((acumulador, actual) => acumulador + actual, 0);\n}\n\nconsole.log(sumarTodos(1, 2, 3, 4)); // 10\n")),(0,r.kt)("h2",{id:"operador-de-cortocircuito"},"Operador de Cortocircuito"),(0,r.kt)("p",null,"Los operadores de cortocircuito en JavaScript son una caracter\xedstica fundamental que permite optimizar el flujo de ejecuci\xf3n en expresiones l\xf3gicas. En JavaScript, los operadores l\xf3gicos ",(0,r.kt)("inlineCode",{parentName:"p"},"&&")," (AND) y ",(0,r.kt)("inlineCode",{parentName:"p"},"||"),' (OR) no solo eval\xfaan las condiciones l\xf3gicas, sino que tambi\xe9n pueden devolver valores espec\xedficos y detener la evaluaci\xf3n una vez que se determina el resultado. Este comportamiento se conoce como "cortocircuito".'),(0,r.kt)("h3",{id:"operador-and-"},"Operador AND (",(0,r.kt)("inlineCode",{parentName:"h3"},"&&"),")"),(0,r.kt)("p",null,"El operador l\xf3gico AND (",(0,r.kt)("inlineCode",{parentName:"p"},"&&"),") eval\xfaa dos expresiones y devuelve el valor de la segunda expresi\xf3n solo si la primera es verdadera. Si la primera expresi\xf3n es falsa, el operador AND devuelve el valor de la primera expresi\xf3n y no eval\xfaa la segunda."),(0,r.kt)("h4",{id:"ejemplos"},"Ejemplos:"),(0,r.kt)("h5",{id:"evaluaci\xf3n-de-condiciones"},"Evaluaci\xf3n de Condiciones:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let a = true;\nlet b = false;\n\nconsole.log(a && b); // false\n")),(0,r.kt)("h5",{id:"retorno-de-valores"},"Retorno de Valores:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let x = 0;\nlet y = 1;\n\nconsole.log(x && y); // 0\nconsole.log(y && x); // 0\n")),(0,r.kt)("p",null,"En el primer caso, ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," es 0 (falso), por lo que ",(0,r.kt)("inlineCode",{parentName:"p"},"x && y")," devuelve 0 sin evaluar ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),". En el segundo caso, ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," es 1 (verdadero), por lo que ",(0,r.kt)("inlineCode",{parentName:"p"},"y && x")," eval\xfaa ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," y devuelve 0."),(0,r.kt)("h4",{id:"uso-com\xfan"},"Uso Com\xfan:"),(0,r.kt)("p",null,"El operador AND se utiliza a menudo para ejecutar una funci\xf3n solo si una condici\xf3n es verdadera."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let user = {\n    name: 'Alice',\n    isAdmin: true\n};\n\nuser.isAdmin && console.log('El usuario es administrador'); // \"El usuario es administrador\"\n")),(0,r.kt)("h3",{id:"operador-or-"},"Operador OR (",(0,r.kt)("inlineCode",{parentName:"h3"},"||"),")"),(0,r.kt)("p",null,"El operador l\xf3gico OR (",(0,r.kt)("inlineCode",{parentName:"p"},"||"),") eval\xfaa dos expresiones y devuelve el valor de la primera expresi\xf3n que sea verdadera. Si la primera expresi\xf3n es verdadera, el operador OR devuelve el valor de la primera expresi\xf3n y no eval\xfaa la segunda. Si la primera expresi\xf3n es falsa, el operador OR devuelve el valor de la segunda expresi\xf3n."),(0,r.kt)("h4",{id:"ejemplos-1"},"Ejemplos:"),(0,r.kt)("h5",{id:"evaluaci\xf3n-de-condiciones-1"},"Evaluaci\xf3n de Condiciones:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let a = true;\nlet b = false;\n\nconsole.log(a || b); // true\n")),(0,r.kt)("h5",{id:"retorno-de-valores-1"},"Retorno de Valores:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let x = 0;\nlet y = 1;\n\nconsole.log(x || y); // 1\nconsole.log(y || x); // 1\n")),(0,r.kt)("p",null,"En el primer caso, ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," es 0 (falso), por lo que ",(0,r.kt)("inlineCode",{parentName:"p"},"x || y")," eval\xfaa ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," y devuelve 1. En el segundo caso, ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," es 1 (verdadero), por lo que ",(0,r.kt)("inlineCode",{parentName:"p"},"y || x")," devuelve 1 sin evaluar ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,r.kt)("h4",{id:"uso-com\xfan-1"},"Uso Com\xfan:"),(0,r.kt)("p",null,"El operador OR se utiliza a menudo para proporcionar valores predeterminados."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let userName = '';\nlet defaultName = 'Invitado';\n\nlet displayName = userName || defaultName;\nconsole.log(displayName); // \"Invitado\"\n")),(0,r.kt)("p",null,"En este caso, ",(0,r.kt)("inlineCode",{parentName:"p"},"userName")," es una cadena vac\xeda (falso), por lo que ",(0,r.kt)("inlineCode",{parentName:"p"},"displayName")," toma el valor de ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultName"),"."),(0,r.kt)("h3",{id:"operador-de-coalescencia-nula-"},"Operador de Coalescencia Nula (",(0,r.kt)("inlineCode",{parentName:"h3"},"??"),")"),(0,r.kt)("p",null,"Introducido en ECMAScript 2020 (ES11), el operador de coalescencia nula (",(0,r.kt)("inlineCode",{parentName:"p"},"??"),") es similar al operador OR (",(0,r.kt)("inlineCode",{parentName:"p"},"||"),"), pero solo considera ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," o ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),' como valores "falsos". Esto es \xfatil para distinguir entre valores ',(0,r.kt)("inlineCode",{parentName:"p"},"null"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," y otros valores falsy como ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," o ",(0,r.kt)("inlineCode",{parentName:"p"},"''"),"."),(0,r.kt)("h4",{id:"ejemplos-2"},"Ejemplos:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let userAge = 0;\nlet defaultAge = 18;\n\nlet age = userAge ?? defaultAge;\nconsole.log(age); // 0\n")),(0,r.kt)("p",null,"En este caso, ",(0,r.kt)("inlineCode",{parentName:"p"},"userAge")," es 0, y con el operador ",(0,r.kt)("inlineCode",{parentName:"p"},"??"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," toma el valor de ",(0,r.kt)("inlineCode",{parentName:"p"},"userAge")," en lugar de ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultAge"),"."),(0,r.kt)("h2",{id:"conclusi\xf3n"},"Conclusi\xf3n"),(0,r.kt)("p",null,"Los operadores de cortocircuito (",(0,r.kt)("inlineCode",{parentName:"p"},"&&")," y ",(0,r.kt)("inlineCode",{parentName:"p"},"||"),") son herramientas poderosas en JavaScript que permiten controlar el flujo de ejecuci\xf3n de las expresiones l\xf3gicas de manera eficiente. Adem\xe1s, el operador de coalescencia nula (",(0,r.kt)("inlineCode",{parentName:"p"},"??"),") proporciona una forma m\xe1s precisa de manejar valores nulos o indefinidos. Comprender y utilizar estos operadores correctamente puede mejorar significativamente la legibilidad y la eficiencia de tu c\xf3digo."),(0,r.kt)("h2",{id:"operador-de-incremento-y-decremento"},"Operador de Incremento y Decremento"),(0,r.kt)("p",null,"Los operadores de incremento (",(0,r.kt)("inlineCode",{parentName:"p"},"++"),") y decremento (",(0,r.kt)("inlineCode",{parentName:"p"},"--"),") en JavaScript son operadores unarios que se utilizan para aumentar o disminuir el valor de una variable num\xe9rica en una unidad. Estos operadores se pueden utilizar tanto en forma prefija como en forma postfija, y cada una de estas formas tiene un comportamiento diferente en cuanto a cu\xe1ndo se realiza la operaci\xf3n de incremento o decremento."),(0,r.kt)("h3",{id:"operador-de-incremento-"},"Operador de Incremento (",(0,r.kt)("inlineCode",{parentName:"h3"},"++"),")"),(0,r.kt)("h4",{id:"forma-postfija-x"},"Forma Postfija (x++)"),(0,r.kt)("p",null,"Cuando se utiliza el operador de incremento en su forma postfija, la variable se incrementa en 1 despu\xe9s de que se haya evaluado la expresi\xf3n."),(0,r.kt)("h5",{id:"ejemplo-7"},"Ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let x = 5;\nconsole.log(x++); // 5 (la variable se incrementa despu\xe9s de la evaluaci\xf3n)\nconsole.log(x);   // 6 (el valor de x ahora es 6)\n")),(0,r.kt)("h4",{id:"forma-prefija-x"},"Forma Prefija (++x)"),(0,r.kt)("p",null,"Cuando se utiliza el operador de incremento en su forma prefija, la variable se incrementa en 1 antes de que se haya evaluado la expresi\xf3n."),(0,r.kt)("h5",{id:"ejemplo-8"},"Ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let y = 5;\nconsole.log(++y); // 6 (la variable se incrementa antes de la evaluaci\xf3n)\nconsole.log(y);   // 6 (el valor de y ahora es 6)\n")),(0,r.kt)("h3",{id:"operador-de-decremento---"},"Operador de Decremento (",(0,r.kt)("inlineCode",{parentName:"h3"},"--"),")"),(0,r.kt)("h4",{id:"forma-postfija-x--"},"Forma Postfija (x--)"),(0,r.kt)("p",null,"Cuando se utiliza el operador de decremento en su forma postfija, la variable se decrementa en 1 despu\xe9s de que se haya evaluado la expresi\xf3n."),(0,r.kt)("h5",{id:"ejemplo-9"},"Ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let a = 5;\nconsole.log(a--); // 5 (la variable se decrementa despu\xe9s de la evaluaci\xf3n)\nconsole.log(a);   // 4 (el valor de a ahora es 4)\n")),(0,r.kt)("h4",{id:"forma-prefija---x"},"Forma Prefija (--x)"),(0,r.kt)("p",null,"Cuando se utiliza el operador de decremento en su forma prefija, la variable se decrementa en 1 antes de que se haya evaluado la expresi\xf3n."),(0,r.kt)("h5",{id:"ejemplo-10"},"Ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let b = 5;\nconsole.log(--b); // 4 (la variable se decrementa antes de la evaluaci\xf3n)\nconsole.log(b);   // 4 (el valor de b ahora es 4)\n")),(0,r.kt)("h3",{id:"comparaci\xf3n-entre-forma-prefija-y-postfija"},"Comparaci\xf3n entre Forma Prefija y Postfija"),(0,r.kt)("p",null,"La principal diferencia entre las formas prefija y postfija de los operadores de incremento y decremento es cu\xe1ndo se realiza la operaci\xf3n en relaci\xf3n con la evaluaci\xf3n de la expresi\xf3n."),(0,r.kt)("h4",{id:"ejemplo-comparativo"},"Ejemplo Comparativo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let m = 10;\nlet n = 10;\n\nconsole.log(m++); // 10 (postfija: devuelve el valor antes del incremento)\nconsole.log(m);   // 11 (m se increment\xf3 despu\xe9s de la evaluaci\xf3n)\n\nconsole.log(++n); // 11 (prefija: incrementa el valor antes de devolverlo)\nconsole.log(n);   // 11 (n se increment\xf3 antes de la evaluaci\xf3n)\n")),(0,r.kt)("p",null,"En el primer caso (",(0,r.kt)("inlineCode",{parentName:"p"},"m++"),"), ",(0,r.kt)("inlineCode",{parentName:"p"},"m")," se incrementa despu\xe9s de que se eval\xfaa la expresi\xf3n, por lo que la primera ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log")," muestra ",(0,r.kt)("inlineCode",{parentName:"p"},"10")," y la segunda ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log")," muestra ",(0,r.kt)("inlineCode",{parentName:"p"},"11"),". En el segundo caso (",(0,r.kt)("inlineCode",{parentName:"p"},"++n"),"), ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," se incrementa antes de que se eval\xfaa la expresi\xf3n, por lo que la primera ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log")," muestra ",(0,r.kt)("inlineCode",{parentName:"p"},"11"),"."),(0,r.kt)("h3",{id:"usos-comunes"},"Usos Comunes"),(0,r.kt)("h4",{id:"bucles"},"Bucles"),(0,r.kt)("p",null,"Los operadores de incremento y decremento se utilizan frecuentemente en bucles ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," para actualizar el contador del bucle."),(0,r.kt)("h5",{id:"ejemplo-11"},"Ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"for (let i = 0; i < 5; i++) {\n    console.log(i); // 0, 1, 2, 3, 4\n}\n")),(0,r.kt)("h4",{id:"operaciones-simples"},"Operaciones Simples"),(0,r.kt)("p",null,"Son \xfatiles para incrementar o decrementar contadores o \xedndices de arrays de manera concisa."),(0,r.kt)("h5",{id:"ejemplo-12"},"Ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let index = 0;\nlet array = [10, 20, 30];\n\nconsole.log(array[index++]); // 10 (despu\xe9s de esto, index es 1)\nconsole.log(array[index++]); // 20 (despu\xe9s de esto, index es 2)\n")),(0,r.kt)("h2",{id:"conclusi\xf3n-1"},"Conclusi\xf3n"),(0,r.kt)("p",null,"Los operadores son esenciales en JavaScript para realizar operaciones matem\xe1ticas, l\xf3gicas y de manipulaci\xf3n de datos. Entender c\xf3mo funcionan y c\xf3mo utilizarlos te permitir\xe1 escribir c\xf3digo m\xe1s eficiente y claro. A medida que practiques, te familiarizar\xe1s con estos operadores y los utilizar\xe1s de manera intuitiva en tus programas."),(0,r.kt)("h2",{id:"cuestionario-de-javascript"},"Cuestionario de JavaScript"),(0,r.kt)("p",null,"\xa1Pon a prueba tus conocimientos de JavaScript con este cuestionario interactivo!"),(0,r.kt)(l.Z,{mdxType:"Quiz"}))}m.isMDXComponent=!0}}]);