"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[3598],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>k});var o=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,o,t=function(e,a){if(null==e)return{};var n,o,t={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var s=o.createContext({}),c=function(e){var a=o.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},d=function(e){var a=c(e.components);return o.createElement(s.Provider,{value:a},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},u=o.forwardRef((function(e,a){var n=e.components,t=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=t,k=m["".concat(s,".").concat(u)]||m[u]||p[u]||r;return n?o.createElement(k,i(i({ref:a},d),{},{components:n})):o.createElement(k,i({ref:a},d))}));function k(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[m]="string"==typeof e?e:t,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6257:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7462),t=(n(7294),n(3905));const r={sidebar_position:1},i="Programaci\xf3n Orientada a Objetos",l={unversionedId:"intermedio/oop",id:"intermedio/oop",title:"Programaci\xf3n Orientada a Objetos",description:"Introducci\xf3n",source:"@site/docs/intermedio/oop.md",sourceDirName:"intermedio",slug:"/intermedio/oop",permalink:"/docs/intermedio/oop",draft:!1,editUrl:"https://github.com/jesquiliche/js_curso/edit/main/docs/intermedio/oop.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Parte 2: JavaScript Intermedio",permalink:"/docs/category/parte-2-javascript-intermedio"},next:{title:"Manipulaci\xf3n del DOM en JavaScript",permalink:"/docs/intermedio/dom"}},s={},c=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Clases y Prototipos",id:"clases-y-prototipos",level:2},{value:"Clases",id:"clases",level:3},{value:"C\xf3mo Crear una Clase",id:"c\xf3mo-crear-una-clase",level:4},{value:"Prototipos",id:"prototipos",level:3},{value:"C\xf3mo Usar Prototipos",id:"c\xf3mo-usar-prototipos",level:4},{value:"Herencia y Polimorfismo",id:"herencia-y-polimorfismo",level:2},{value:"Herencia",id:"herencia",level:3},{value:"C\xf3mo Usar Herencia",id:"c\xf3mo-usar-herencia",level:4},{value:"Polimorfismo",id:"polimorfismo",level:3},{value:"C\xf3mo Usar Polimorfismo",id:"c\xf3mo-usar-polimorfismo",level:4},{value:"M\xe9todos Est\xe1ticos y Din\xe1micos",id:"m\xe9todos-est\xe1ticos-y-din\xe1micos",level:2},{value:"M\xe9todos Est\xe1ticos",id:"m\xe9todos-est\xe1ticos",level:3},{value:"C\xf3mo Usar M\xe9todos Est\xe1ticos",id:"c\xf3mo-usar-m\xe9todos-est\xe1ticos",level:4},{value:"M\xe9todos Din\xe1micos",id:"m\xe9todos-din\xe1micos",level:3},{value:"C\xf3mo Usar M\xe9todos Din\xe1micos",id:"c\xf3mo-usar-m\xe9todos-din\xe1micos",level:4},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}],d={toc:c},m="wrapper";function p(e){let{components:a,...n}=e;return(0,t.kt)(m,(0,o.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"programaci\xf3n-orientada-a-objetos"},"Programaci\xf3n Orientada a Objetos"),(0,t.kt)("h1",{id:"programaci\xf3n-orientada-a-objetos-1"},"Programaci\xf3n Orientada a Objetos"),(0,t.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,t.kt)("p",null,"La Programaci\xf3n Orientada a Objetos (POO) es una manera de organizar y estructurar el c\xf3digo para que sea m\xe1s f\xe1cil de entender, mantener y reutilizar. En este cap\xedtulo, exploraremos los conceptos b\xe1sicos de la POO en JavaScript, incluyendo clases y prototipos, herencia y polimorfismo, y m\xe9todos est\xe1ticos y din\xe1micos."),(0,t.kt)("h2",{id:"clases-y-prototipos"},"Clases y Prototipos"),(0,t.kt)("h3",{id:"clases"},"Clases"),(0,t.kt)("p",null,"Las clases en JavaScript son como plantillas para crear objetos. Piensa en una clase como un molde para hacer galletas: el molde define la forma de las galletas, pero cada galleta individual puede ser diferente."),(0,t.kt)("h4",{id:"c\xf3mo-crear-una-clase"},"C\xf3mo Crear una Clase"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'class Persona {\n    // El constructor es una funci\xf3n especial que se llama cuando creas una nueva persona\n    constructor(nombre, edad) {\n        this.nombre = nombre; // Asigna el nombre pasado al constructor a la nueva persona\n        this.edad = edad; // Asigna la edad pasada al constructor a la nueva persona\n    }\n\n    // Un m\xe9todo es una funci\xf3n que pertenece a una clase\n    saludar() {\n        console.log(`Hola, mi nombre es ${this.nombre} y tengo ${this.edad} a\xf1os.`);\n    }\n}\n\n// Crear una nueva persona llamada Juan de 30 a\xf1os\nconst juan = new Persona("Juan", 30);\njuan.saludar(); // Salida: "Hola, mi nombre es Juan y tengo 30 a\xf1os."\n')),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Explicaci\xf3n:")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"class Persona { ... }"),": Define una nueva clase llamada ",(0,t.kt)("inlineCode",{parentName:"li"},"Persona"),"."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"constructor(nombre, edad) { ... }"),": El constructor es una funci\xf3n especial que se ejecuta cuando se crea una nueva instancia de la clase."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"this.nombre"),": ",(0,t.kt)("inlineCode",{parentName:"li"},"this")," se refiere a la nueva instancia de la clase que se est\xe1 creando."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"saludar() { ... }"),": Define un m\xe9todo que pueden usar todas las instancias de ",(0,t.kt)("inlineCode",{parentName:"li"},"Persona"),".")),(0,t.kt)("h3",{id:"prototipos"},"Prototipos"),(0,t.kt)("p",null,"Antes de que existieran las clases en JavaScript, se utilizaban prototipos para crear objetos y compartir m\xe9todos entre ellos."),(0,t.kt)("h4",{id:"c\xf3mo-usar-prototipos"},"C\xf3mo Usar Prototipos"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'// Crear una funci\xf3n constructora para la clase Persona\nfunction Persona(nombre, edad) {\n    this.nombre = nombre;\n    this.edad = edad;\n}\n\n// A\xf1adir un m\xe9todo al prototipo de Persona\nPersona.prototype.saludar = function() {\n    console.log(`Hola, mi nombre es ${this.nombre} y tengo ${this.edad} a\xf1os.`);\n};\n\n// Crear una nueva persona llamada Mar\xeda de 25 a\xf1os\nconst maria = new Persona("Mar\xeda", 25);\nmaria.saludar(); // Salida: "Hola, mi nombre es Mar\xeda y tengo 25 a\xf1os."\n')),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Explicaci\xf3n:")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"function Persona(nombre, edad) { ... }"),": Define una funci\xf3n constructora para crear objetos ",(0,t.kt)("inlineCode",{parentName:"li"},"Persona"),"."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Persona.prototype.saludar = function() { ... }"),": A\xf1ade el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"li"},"saludar")," al prototipo de ",(0,t.kt)("inlineCode",{parentName:"li"},"Persona"),".")),(0,t.kt)("h2",{id:"herencia-y-polimorfismo"},"Herencia y Polimorfismo"),(0,t.kt)("h3",{id:"herencia"},"Herencia"),(0,t.kt)("p",null,"La herencia es cuando una clase toma prestadas propiedades y m\xe9todos de otra clase. Imagina que tienes una clase ",(0,t.kt)("inlineCode",{parentName:"p"},"Animal")," y quieres crear una clase ",(0,t.kt)("inlineCode",{parentName:"p"},"Perro")," que herede de ",(0,t.kt)("inlineCode",{parentName:"p"},"Animal"),"."),(0,t.kt)("h4",{id:"c\xf3mo-usar-herencia"},"C\xf3mo Usar Herencia"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'class Animal {\n    constructor(nombre) {\n        this.nombre = nombre;\n    }\n\n    hacerSonido() {\n        console.log(`${this.nombre} hace un sonido.`);\n    }\n}\n\nclass Perro extends Animal {\n    constructor(nombre, raza) {\n        super(nombre); // Llama al constructor de la clase base (Animal)\n        this.raza = raza;\n    }\n\n    ladrar() {\n        console.log(`${this.nombre}, el ${this.raza}, ladra.`);\n    }\n}\n\nconst miPerro = new Perro("Rex", "Labrador");\nmiPerro.hacerSonido(); // Salida: "Rex hace un sonido."\nmiPerro.ladrar(); // Salida: "Rex, el Labrador, ladra."\n')),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Explicaci\xf3n:")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"class Perro extends Animal { ... }"),": ",(0,t.kt)("inlineCode",{parentName:"li"},"Perro")," hereda de ",(0,t.kt)("inlineCode",{parentName:"li"},"Animal"),", lo que significa que ",(0,t.kt)("inlineCode",{parentName:"li"},"Perro")," tiene todas las propiedades y m\xe9todos de ",(0,t.kt)("inlineCode",{parentName:"li"},"Animal"),"."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"super(nombre);"),": Llama al constructor de la clase base (",(0,t.kt)("inlineCode",{parentName:"li"},"Animal"),") para inicializar la parte ",(0,t.kt)("inlineCode",{parentName:"li"},"Animal")," del objeto ",(0,t.kt)("inlineCode",{parentName:"li"},"Perro"),".")),(0,t.kt)("h3",{id:"polimorfismo"},"Polimorfismo"),(0,t.kt)("p",null,"El polimorfismo es cuando una clase puede ser tratada como una instancia de su clase base. Esto permite que diferentes clases respondan de manera diferente a la misma llamada de m\xe9todo."),(0,t.kt)("h4",{id:"c\xf3mo-usar-polimorfismo"},"C\xf3mo Usar Polimorfismo"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'class Gato extends Animal {\n    hacerSonido() {\n        console.log(`${this.nombre} ma\xfalla.`);\n    }\n}\n\nconst miGato = new Gato("Mia");\nmiGato.hacerSonido(); // Salida: "Mia ma\xfalla."\n\nconst animales = [miPerro, miGato];\nanimales.forEach(animal => animal.hacerSonido());\n\n// Salida:\n// "Rex hace un sonido."\n// "Mia ma\xfalla."\n')),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Explicaci\xf3n:")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"class Gato extends Animal { ... }"),": ",(0,t.kt)("inlineCode",{parentName:"li"},"Gato")," hereda de ",(0,t.kt)("inlineCode",{parentName:"li"},"Animal"),"."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"hacerSonido() { ... }"),": ",(0,t.kt)("inlineCode",{parentName:"li"},"Gato")," tiene su propia implementaci\xf3n del m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"li"},"hacerSonido"),".")),(0,t.kt)("h2",{id:"m\xe9todos-est\xe1ticos-y-din\xe1micos"},"M\xe9todos Est\xe1ticos y Din\xe1micos"),(0,t.kt)("h3",{id:"m\xe9todos-est\xe1ticos"},"M\xe9todos Est\xe1ticos"),(0,t.kt)("p",null,"Los m\xe9todos est\xe1ticos son funciones que pertenecen a la clase en s\xed misma, no a las instancias de la clase. Son \xfatiles para operaciones que no dependen de una instancia espec\xedfica de la clase."),(0,t.kt)("h4",{id:"c\xf3mo-usar-m\xe9todos-est\xe1ticos"},"C\xf3mo Usar M\xe9todos Est\xe1ticos"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"class Calculadora {\n    static sumar(a, b) {\n        return a + b;\n    }\n}\n\nconsole.log(Calculadora.sumar(5, 3)); // Salida: 8\n")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Explicaci\xf3n:")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"static sumar(a, b) { ... }"),": Define el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"li"},"sumar")," como un m\xe9todo est\xe1tico de ",(0,t.kt)("inlineCode",{parentName:"li"},"Calculadora"),".")),(0,t.kt)("h3",{id:"m\xe9todos-din\xe1micos"},"M\xe9todos Din\xe1micos"),(0,t.kt)("p",null,"Los m\xe9todos din\xe1micos son funciones que pertenecen a las instancias de la clase. Son \xfatiles para operaciones que deben realizarse en objetos espec\xedficos."),(0,t.kt)("h4",{id:"c\xf3mo-usar-m\xe9todos-din\xe1micos"},"C\xf3mo Usar M\xe9todos Din\xe1micos"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"class Contador {\n    constructor() {\n        this.cuenta = 0;\n    }\n\n    incrementar() {\n        this.cuenta++;\n        console.log(this.cuenta);\n    }\n}\n\nconst miContador = new Contador();\nmiContador.incrementar(); // Salida: 1\nmiContador.incrementar(); // Salida: 2\n")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Explicaci\xf3n:")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"incrementar() { ... }"),": Define un m\xe9todo din\xe1mico que incrementa y muestra la cuenta de una instancia de ",(0,t.kt)("inlineCode",{parentName:"li"},"Contador"),".")),(0,t.kt)("h2",{id:"conclusi\xf3n"},"Conclusi\xf3n"),(0,t.kt)("p",null,"La Programaci\xf3n Orientada a Objetos en JavaScript te permite organizar y estructurar tu c\xf3digo de una manera clara y reutilizable. Las clases y los prototipos facilitan la creaci\xf3n y gesti\xf3n de objetos, mientras que la herencia y el polimorfismo permiten extender y personalizar el comportamiento de los objetos. Los m\xe9todos est\xe1ticos y din\xe1micos ofrecen diferentes formas de trabajar con las clases y sus instancias, proporcionando flexibilidad y modularidad en tu c\xf3digo. Con estos conceptos, podr\xe1s escribir programas m\xe1s eficientes y f\xe1ciles de mantener."),(0,t.kt)("hr",null),(0,t.kt)("p",null,"Este cap\xedtulo ofrece una introducci\xf3n accesible a la POO en JavaScript, con explicaciones simples y ejemplos pr\xe1cticos para facilitar el aprendizaje de estos conceptos esenciales."))}p.isMDXComponent=!0}}]);