"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[5011],{3905:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>g});var o=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function t(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,o,a=function(e,n){if(null==e)return{};var r,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)r=s[o],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)r=s[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=o.createContext({}),c=function(e){var n=o.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):t(t({},n),e)),r},d=function(e){var n=c(e.components);return o.createElement(i.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(r),m=a,g=p["".concat(i,".").concat(m)]||p[m]||u[m]||s;return r?o.createElement(g,t(t({ref:n},d),{},{components:r})):o.createElement(g,t({ref:n},d))}));function g(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=r.length,t=new Array(s);t[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[p]="string"==typeof e?e:a,t[1]=l;for(var c=2;c<s;c++)t[c]=r[c];return o.createElement.apply(null,t)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1106:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>t,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var o=r(7462),a=(r(7294),r(3905));const s={sidebar_position:3},t="Desarrollo con Node.js",l={unversionedId:"herramientas/node",id:"herramientas/node",title:"Desarrollo con Node.js",description:"Node.js es un entorno de ejecuci\xf3n para JavaScript que permite a los desarrolladores crear aplicaciones del lado del servidor. Es r\xe1pido, escalable y est\xe1 basado en el motor V8 de Google. En este cap\xedtulo, aprender\xe1s c\xf3mo crear un servidor b\xe1sico con Node.js, utilizar el framework Express y conectar tu aplicaci\xf3n a una base de datos.",source:"@site/docs/herramientas/node.md",sourceDirName:"herramientas",slug:"/herramientas/node",permalink:"/docs/herramientas/node",draft:!1,editUrl:"https://github.com/jesquiliche/js_curso/edit/main/docs/herramientas/node.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Frameworks y Librer\xedas Modernas",permalink:"/docs/herramientas/framenwork"},next:{title:"Buenas Pr\xe1cticas y Patrones de Dise\xf1o",permalink:"/docs/herramientas/solid"}},i={},c=[{value:"Creaci\xf3n de un Servidor B\xe1sico",id:"creaci\xf3n-de-un-servidor-b\xe1sico",level:2},{value:"Instalaci\xf3n de Node.js",id:"instalaci\xf3n-de-nodejs",level:3},{value:"Creaci\xf3n del Proyecto",id:"creaci\xf3n-del-proyecto",level:3},{value:"Creaci\xf3n del Servidor B\xe1sico",id:"creaci\xf3n-del-servidor-b\xe1sico",level:3},{value:"Uso de Express",id:"uso-de-express",level:2},{value:"Instalaci\xf3n de Express",id:"instalaci\xf3n-de-express",level:3},{value:"Creaci\xf3n de un Servidor con Express",id:"creaci\xf3n-de-un-servidor-con-express",level:3},{value:"Rutas y Middlewares en Express",id:"rutas-y-middlewares-en-express",level:3},{value:"Conexi\xf3n a Bases de Datos",id:"conexi\xf3n-a-bases-de-datos",level:2},{value:"Instalaci\xf3n de MongoDB y Mongoose",id:"instalaci\xf3n-de-mongodb-y-mongoose",level:3},{value:"Conexi\xf3n a MongoDB con Mongoose",id:"conexi\xf3n-a-mongodb-con-mongoose",level:5},{value:"Definici\xf3n de un Modelo con Mongoose",id:"definici\xf3n-de-un-modelo-con-mongoose",level:3},{value:"Uso del Modelo en el Servidor",id:"uso-del-modelo-en-el-servidor",level:3},{value:"Actualizaci\xf3n y Eliminaci\xf3n de Usuarios",id:"actualizaci\xf3n-y-eliminaci\xf3n-de-usuarios",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}],d={toc:c},p="wrapper";function u(e){let{components:n,...r}=e;return(0,a.kt)(p,(0,o.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"desarrollo-con-nodejs"},"Desarrollo con Node.js"),(0,a.kt)("p",null,"Node.js es un entorno de ejecuci\xf3n para JavaScript que permite a los desarrolladores crear aplicaciones del lado del servidor. Es r\xe1pido, escalable y est\xe1 basado en el motor V8 de Google. En este cap\xedtulo, aprender\xe1s c\xf3mo crear un servidor b\xe1sico con Node.js, utilizar el framework Express y conectar tu aplicaci\xf3n a una base de datos."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"creaci\xf3n-de-un-servidor-b\xe1sico"},"Creaci\xf3n de un Servidor B\xe1sico"),(0,a.kt)("p",null,"Para empezar, vamos a crear un servidor b\xe1sico con Node.js. Necesitar\xe1s tener Node.js instalado en tu m\xe1quina."),(0,a.kt)("h3",{id:"instalaci\xf3n-de-nodejs"},"Instalaci\xf3n de Node.js"),(0,a.kt)("p",null,"Descarga e instala Node.js desde su ",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/"},"sitio oficial"),". Para verificar la instalaci\xf3n, ejecuta:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node -v\nnpm -v\n")),(0,a.kt)("h3",{id:"creaci\xf3n-del-proyecto"},"Creaci\xf3n del Proyecto"),(0,a.kt)("p",null,"Crea un nuevo directorio para tu proyecto y navega a \xe9l en tu terminal. Luego, inicializa un proyecto de Node.js:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir my-node-project\ncd my-node-project\nnpm init -y\n")),(0,a.kt)("h3",{id:"creaci\xf3n-del-servidor-b\xe1sico"},"Creaci\xf3n del Servidor B\xe1sico"),(0,a.kt)("p",null,"Crea un archivo llamado ",(0,a.kt)("inlineCode",{parentName:"p"},"server.js")," y a\xf1ade el siguiente c\xf3digo:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello, World!\\n');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n")),(0,a.kt)("p",null,"Para ejecutar el servidor, usa el comando:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node server.js\n")),(0,a.kt)("p",null,"Abre tu navegador y navega a ",(0,a.kt)("inlineCode",{parentName:"p"},"http://127.0.0.1:3000/"),'. Deber\xedas ver el mensaje "Hello, World!".'),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"uso-de-express"},"Uso de Express"),(0,a.kt)("p",null,"Express es un framework minimalista y flexible para Node.js que proporciona un robusto conjunto de caracter\xedsticas para aplicaciones web y m\xf3viles."),(0,a.kt)("h3",{id:"instalaci\xf3n-de-express"},"Instalaci\xf3n de Express"),(0,a.kt)("p",null,"Instala Express mediante npm:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install express\n")),(0,a.kt)("h3",{id:"creaci\xf3n-de-un-servidor-con-express"},"Creaci\xf3n de un Servidor con Express"),(0,a.kt)("p",null,"Modifica el archivo ",(0,a.kt)("inlineCode",{parentName:"p"},"server.js")," para utilizar Express:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello, World!');\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}/`);\n});\n")),(0,a.kt)("p",null,"Ejecuta el servidor de nuevo:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node server.js\n")),(0,a.kt)("p",null,"Navega a ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/"),' y deber\xedas ver el mensaje "Hello, World!".'),(0,a.kt)("h3",{id:"rutas-y-middlewares-en-express"},"Rutas y Middlewares en Express"),(0,a.kt)("p",null,"Express permite definir m\xfaltiples rutas y utilizar middlewares para manejar las solicitudes. A\xf1ade algunas rutas adicionales y un middleware:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const express = require('express');\nconst app = express();\nconst port = 3000;\n\n// Middleware para todas las rutas\napp.use((req, res, next) => {\n  console.log(`${req.method} request for '${req.url}'`);\n  next();\n});\n\napp.get('/', (req, res) => {\n  res.send('Hello, World!');\n});\n\napp.get('/about', (req, res) => {\n  res.send('About Page');\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}/`);\n});\n")),(0,a.kt)("p",null,"Con esto, cada solicitud a cualquier ruta ser\xe1 registrada en la consola."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"conexi\xf3n-a-bases-de-datos"},"Conexi\xf3n a Bases de Datos"),(0,a.kt)("p",null,"Node.js puede conectarse a varias bases de datos como MongoDB, MySQL, PostgreSQL, entre otras. Vamos a ver c\xf3mo conectar una aplicaci\xf3n Node.js a MongoDB utilizando Mongoose."),(0,a.kt)("h3",{id:"instalaci\xf3n-de-mongodb-y-mongoose"},"Instalaci\xf3n de MongoDB y Mongoose"),(0,a.kt)("p",null,"Primero, aseg\xfarate de tener MongoDB instalado y en funcionamiento. Luego, instala Mongoose, que es una biblioteca de modelado de datos para MongoDB y Node.js."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install mongoose\n")),(0,a.kt)("h5",{id:"conexi\xf3n-a-mongodb-con-mongoose"},"Conexi\xf3n a MongoDB con Mongoose"),(0,a.kt)("p",null,"Crea un archivo llamado ",(0,a.kt)("inlineCode",{parentName:"p"},"database.js")," y a\xf1ade el siguiente c\xf3digo para conectarte a MongoDB:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydatabase', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nconst db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', () => {\n  console.log('Connected to MongoDB');\n});\n")),(0,a.kt)("p",null,"Luego, modifica ",(0,a.kt)("inlineCode",{parentName:"p"},"server.js")," para incluir esta conexi\xf3n:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const express = require('express');\nconst mongoose = require('mongoose');\nconst app = express();\nconst port = 3000;\n\nmongoose.connect('mongodb://localhost:27017/mydatabase', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nconst db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', () => {\n  console.log('Connected to MongoDB');\n});\n\napp.get('/', (req, res) => {\n  res.send('Hello, World!');\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}/`);\n});\n")),(0,a.kt)("h3",{id:"definici\xf3n-de-un-modelo-con-mongoose"},"Definici\xf3n de un Modelo con Mongoose"),(0,a.kt)("p",null,"Define un modelo para tu base de datos MongoDB. Crea un archivo llamado ",(0,a.kt)("inlineCode",{parentName:"p"},"models/User.js"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: String,\n  password: String,\n});\n\nconst User = mongoose.model('User', userSchema);\n\nmodule.exports = User;\n")),(0,a.kt)("h3",{id:"uso-del-modelo-en-el-servidor"},"Uso del Modelo en el Servidor"),(0,a.kt)("p",null,"Modifica ",(0,a.kt)("inlineCode",{parentName:"p"},"server.js")," para utilizar el modelo ",(0,a.kt)("inlineCode",{parentName:"p"},"User"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const express = require('express');\nconst mongoose = require('mongoose');\nconst User = require('./models/User');\nconst app = express();\nconst port = 3000;\n\nmongoose.connect('mongodb://localhost:27017/mydatabase', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nconst db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', () => {\n  console.log('Connected to MongoDB');\n});\n\n// Middleware para parsear JSON\napp.use(express.json());\n\napp.get('/', (req, res) => {\n  res.send('Hello, World!');\n});\n\n// Ruta para crear un nuevo usuario\napp.post('/users', async (req, res) => {\n  const user = new User(req.body);\n  try {\n    await user.save();\n    res.status(201).send(user);\n  } catch (error) {\n    res.status(400).send(error);\n  }\n});\n\n// Ruta para obtener todos los usuarios\napp.get('/users', async (req, res) => {\n  try {\n    const users = await User.find();\n    res.send(users);\n  } catch (error) {\n    res.status(500).send(error);\n  }\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}/`);\n});\n")),(0,a.kt)("h3",{id:"actualizaci\xf3n-y-eliminaci\xf3n-de-usuarios"},"Actualizaci\xf3n y Eliminaci\xf3n de Usuarios"),(0,a.kt)("p",null,"A\xf1adimos rutas adicionales para actualizar y eliminar usuarios:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Ruta para actualizar un usuario\napp.put('/users/:id', async (req, res) => {\n  try {\n    const user = await User.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });\n    if (!user) {\n      return res.status(404).send();\n    }\n    res.send(user);\n  } catch (error) {\n    res.status(400).send(error);\n  }\n});\n\n// Ruta para eliminar un usuario\napp.delete('/users/:id', async (req, res) => {\n  try {\n    const user = await User.findByIdAndDelete(req.params.id);\n    if (!user) {\n      return res.status(404).send();\n    }\n    res.send(user);\n  } catch (error) {\n    res.status(500).send(error);\n  }\n});\n")),(0,a.kt)("p",null,"Con estas nuevas rutas, puedes realizar operaciones CRUD (Crear, Leer, Actualizar y Eliminar) completas sobre el modelo ",(0,a.kt)("inlineCode",{parentName:"p"},"User"),"."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"conclusi\xf3n"},"Conclusi\xf3n"),(0,a.kt)("p",null,"En este cap\xedtulo, has aprendido a configurar un servidor b\xe1sico con Node.js y Express, a manejar rutas y middlewares, y a conectar tu aplicaci\xf3n a una base de datos MongoDB utilizando Mongoose. Con estas habilidades, puedes construir aplicaciones web del lado del servidor que son escalables y eficientes. Node.js, junto con Express y Mongoose, ofrece una plataforma poderosa para el desarrollo backend moderno, permiti\xe9ndote gestionar tanto el servidor como la base de datos de manera efectiva."))}u.isMDXComponent=!0}}]);